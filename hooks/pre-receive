#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => qw(all);

# This pre-receive hook comes from jira issue AR-206
# The idea is to prevent a naive git commit -a from updating
# submodules in genome.git that should never be updated by
# a regular user.

# The ur and workflow submodules are in the list of protected directories
# so that only apipe-tester (and other users in the white list) can make
# changes to those submodules.  This will prevent accidental modifications.

my @user_whitelist  = exists $ENV{GENOMECI_USER_WHITELIST}
    ? (split /:/, $ENV{GENOMECI_USER_WHITELIST})
    : qw( apipe-tester );
my @protected_dirs  = qw( ur workflow );
my @protected_heads = qw( master );

my $user_name = getpwuid($>);
exit 0 if grep {$user_name eq $_} @user_whitelist;

# If the user running the hook is in the user whitelist, we can exit
# immediately with success, because whitelist users are allowed to change
# anything.
#
# For non-whitelist users, we should inspect specifically what they are changing.
# We only care about branches in the list of proteted_heads.  We do not check
# tags.
#
# This hook processes a list of arguments that arrive on STDIN in this format:
#       <old-value> SP <new-value> SP <ref-name> LF
# See "pre-receive" in githooks(5) for more information.

my $exit_status = 0;
while (my $line = <STDIN>) {
    chomp $line;

    my ($old_value, $new_value, $ref_name) = split / /, $line;
    next unless grep {$ref_name eq "refs/heads/$_"} @protected_heads;

    if ($old_value eq '0000000000000000000000000000000000000000') {
        # CASE: Protected branch did not exist previously. Allowed.
        next;
    }

    if ($new_value eq '0000000000000000000000000000000000000000') {
        # CASE: Attempt to delete protected branch. Restricted.
        print "*** $user_name is not allowed to delete $ref_name\n";
        $exit_status++;
    }

    my $cmd = "git diff --name-only $old_value $new_value -- @protected_dirs";
    if ( my @modified_dirs = qx($cmd) ) {
        # CASE: Attempt to modify dir on protected branch. Restricted.
        chomp @modified_dirs;
        print "*** $user_name is not allowed to modify @modified_dirs on $ref_name\n";
        $exit_status++;
    }
}

exit $exit_status;
