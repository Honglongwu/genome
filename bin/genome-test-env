#!/usr/bin/env bash

set -o errexit
set -o pipefail

usage() {
echo 'usage: genome-test-env [command]

See --help for details.'
}

man() {
echo '
NAME

    genome-test-env - setup Genome testing environment

SYNOPSIS

    genome-test-env [command]

DESCRIPTION

    Setup a testing environment for Genome that will checkout the correct
    version of the UR, Workflow, and configuration submodules as well as setup
    the shell environment to use them and the correct Perl and Prove
    executables.

EXAMPLES

    genome-test-env test-tracker prove --lsf --git

    Wrap test-tracker to ensure the correct environment is used for running
    tests.

    genome-test-env

    Open a new shell with the correct environment so you can run tests
    manually.  Press <Ctrl>-D or type `logout` to return to original shell.
'
}

case $1 in
    "-h") usage; exit 0;;
    "--help") man; exit 0;;
esac

set -o nounset

GIT_DIR=$(git rev-parse --show-toplevel 2> /dev/null || true)

if [ -z "${GIT_DIR}" ]; then
    echo "ERROR: Make sure you are in a git repo!"
    exit 128
fi

if [ ! -f "${GIT_DIR}/lib/perl/Genome.pm" ]; then
    echo "ERROR: Make sure you are in a Genome workspace!"
    exit 128
fi

export WORKSPACE="${GIT_DIR}"
ORIG_PWD="${PWD}"
cd "${WORKSPACE}"

export GENOMECI_BASEDIR=/gsc/scripts/opt/genome
$GENOMECI_BASEDIR/bin/model-test-prep-multi '5.10'
source $GENOMECI_BASEDIR/bin/model-test-env.sh "${WORKSPACE}"

if [ -n "$BASH" -o -n "$ZSH_VERSION" ] ; then
    hash -r 2>/dev/null
fi

cd "$ORIG_PWD"

echo ''
echo "Perl: $(perl -e 'printf(qq(%vd\n), $^V)')"
echo "Prove: $(prove --version)"
echo "UR: $(wtf UR | head -n 1)"
echo "Workflow: $(wtf Workflow | head -n 1)"
echo "Genome: $(wtf Genome | head -n 1)"
echo ''

unset GENOME_QUERY_POSTGRES
unset PROMPT_COMMAND
export PS1="(Genome Test Env) \w $ "
export UR_DBI_NO_COMMIT=1

if [ $# -gt 0 ]; then
    echo "$@"...
    exec "$@"
else
    if [ -n "$BASH" ]; then
        echo 'Press <Ctrl>-D or type `logout` to return to normal environment.'
        echo ''
        exec bash --norc --noprofile
    else
        echo 'Only `bash` shells are supported at this time.'
        exit 128
    fi
fi
