#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

use Test::More;
use above 'Genome';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

my $pkg = 'Genome::Process';
use_ok($pkg) || die;

{
    package TestProcess;

    use strict;
    use warnings FATAL => 'all';
    use Genome;

    class TestProcess {
        is => ['Genome::Process'],
    };

    1;
}
{
    package TestResult;

    use strict;
    use warnings FATAL => 'all';
    use Genome;

    class TestResult {
        is => ['Genome::SoftwareResult'],
    };

    1;
}

my $p = TestProcess->create();
ok($p, "Created TestProcess object");

ok($p->software_revision, 'software_revision automatically set');
ok($p->status, 'status automatically set');
ok(defined($p->created_at), 'created_at automatically set');

ok(! defined($p->started_at), 'started_at NOT automatically set');
ok(! defined($p->ended_at), 'ended_at NOT automatically set');

my @errors = $p->__errors__;
is(scalar(@errors), 1, "Found just one __errors__");
is_deeply([$errors[0]->properties], ['disk_allocation_id'],
    "Error is missing 'disk_allocation_id' value");

my $da = $p->create_disk_allocation;
is($p->create_disk_allocation, $da,
    "No new disk allocation created if one was already made");
@errors = $p->__errors__;
is(scalar(@errors), 0, "Found no __errors__ now that disk_allocation is set");

my $result = TestResult->create();
$result->add_user(user => $p, label => 'test');
is_deeply([$p->results], [$result],
    'Found TestResult via SoftwareResult::User relationship');

$result->add_user(user => $p, label => 'test');
is_deeply([$p->results], [$result, $result],
    'Found two TestResults via SoftwareResult::User relationship');

done_testing();
