#!/usr/bin/env perl
use strict;
use warnings;
use above 'Genome';
use Test::More tests => 92;

class Genome::Bar {};

class Genome::Foo {
    is => 'Command::V2',
    has_param => [
        p1 => { is => 'Text' },
        p2 => { is => 'Number' },
        p3 => { is => 'Genome::Bar' },
        p4 => { is => 'Number', is_many => 1 },
        p5 => { is => 'Genome::Bar', is_many => 1 },
        p6 => { is => 'Boolean', default_value => 1 },
    ],
    has_input => [
        i1 => { is => 'Text' },
        i2 => { is => 'Number' },
        i3 => { is => 'Genome::Bar' },
        i4 => { is => 'Number', is_many => 1 },
        i5 => { is => 'Genome::Bar', is_many => 1 },
    ],
    #has_metric => [
        # not yet supported
        #m1 => { is => 'Text' },
        #m2 => { is => 'Number' },
        #m3 => { is => 'Genome::Bar' },
        #m4 => { is => 'Number', is_many => 1 },
        #m5 => { is => 'Genome::Bar', is_many => 1 },
    #],
};

my $cmd_meta = Genome::Foo->__meta__;
my $sr_meta = Genome::Foo::Result->__meta__;
ok($sr_meta, "sucessfully autogenerated a result tracking class for a Command::V2 subclass");

class Genome::Baz { is => 'Command::V1' };
eval { Genome::Baz::Result->__meta__; };
ok($@, "correctly failed to generate a result subclass for a Command::V1 subclass");

class Genome::Buz {};
eval { Genome::Buz::Result->__meta__; };
ok($@, "correctly failed to generate a result for a non-command class");

my $pmeta = $sr_meta->property("command");
ok($pmeta->data_type->isa("Command"), "class is correct on the command property for the software result");

my %cmd_props = map { $_->property_name => $_ } $cmd_meta->properties();
for my $n (sort keys %cmd_props) {
    my $cmd_prop = $cmd_meta->property($n);
    next unless (
        ($cmd_prop->can("is_input") and $cmd_prop->is_input)
        or ($cmd_prop->can("is_param") and $cmd_prop->is_param)
    );
        
    my $sr_prop = $sr_meta->property($n);
    ok($sr_prop, "software result has a property $n");

    for my $nn (qw/is_input is_param has_many is_optional/) {  # TODO: add is_metric and is_output 
        if ($cmd_prop->can($nn)) {
            ok($sr_prop->can($nn), "software result property $n has $nn meta-property");
            is($sr_prop->$nn,$cmd_prop->$nn, "values match for $n $nn");
        }
    }
    is($sr_prop->default_value, undef, "no default value set on the SR for property $n, regardless of whether the command has one");
}


