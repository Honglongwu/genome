#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

use Test::More;
use above 'Genome';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

my $pkg = 'Genome::Command::DelegatesToResult';
use_ok($pkg) || die;

{
    package TestCommand;

    use strict;
    use warnings FATAL => 'all';
    use Genome;

    class TestCommand {
        is => [$pkg],
        has => [
            test_name => {},
        ],
    };

    sub result_class {
        return "TestResult";
    }

    sub input_hash {
        my $self = shift;
        return (test_name => $self->test_name);
    }
}
{
    package TestResult;

    use strict;
    use warnings FATAL => 'all';
    use Genome;

    class TestResult {
        is => 'Genome::SoftwareResult',
    };
}
{
    package TestUser;

    use strict;
    use warnings FATAL => 'all';
    use Genome;

    class TestUser {
        is => 'UR::Object',
        has => [
            name => {},
        ],
    };
}

my $USER1 = TestUser->create(name => 'USER1');

my $cmd = TestCommand->create(user => $USER1, test_name => 'foo');
is($cmd->shortcut(), 0, 'Shortcut returns 0 when no result exists') or die;
is($cmd->execute(), 1, 'Execute returns 1 when successful') or die;

my $sr = $cmd->output_result;
ok($sr, 'Found a TestResult was created') or die;

check_sr_user($USER1, 'created');


my $USER2 = TestUser->create(name => 'USER2');
$cmd = TestCommand->create(user => $USER2, test_name => 'foo');
is($cmd->shortcut(), 1, 'Shortcut returns 1 when result exists') or die;

my $shortcut_sr = $cmd->output_result;
is($shortcut_sr, $sr, 'Found the same TestResult when shortcutting') or die;

check_sr_user($USER2, 'shortcut');


$cmd = TestCommand->create(test_name => 'bar');
$cmd->execute();
is_deeply([$cmd->output_result->users], [], "No users created when 'user' is not passed as an input");

done_testing();

sub check_sr_user {
    my $user = shift;
    my $label = shift;

    subtest sprintf("SoftwareResult::User (%s)", $user->name) => sub {
        my $sr_user = Genome::SoftwareResult::User->get(user => $user);
        ok($sr_user, 'Found a SoftwareResult::User was created') or die;

        is($sr_user->software_result, $sr, 'User has correct software_result');
        is($sr_user->label, $label, "User has label: $label");
    };
}
