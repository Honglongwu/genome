#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Temp 'tempdir';
use Filesys::Df qw();

use_ok('Genome::Disk::Allocation') or die;
use_ok('Genome::Disk::Volume') or die;

push @Genome::Disk::Allocation::APIPE_DISK_GROUPS, 'test';
$Genome::Disk::Allocation::CREATE_DUMMY_VOLUMES_FOR_TESTING = 0;

# Temp testing directory, used as mount path for test volumes and allocations
my $test_dir_base = "$ENV{GENOME_TEST_TEMP}/";
my $test_dir = tempdir(
    'allocation_testing_XXXXXX',
    DIR => $test_dir_base,
    UNLINK => 1,
    CLEANUP => 1,
);

# Create test group
my $group = Genome::Disk::Group->create(
    disk_group_name => 'test',
    subdirectory => 'info',
    permissions => '775',
    sticky => 1,
    unix_uid => '1',
    unix_gid => '1',
);
ok($group, 'created test disk group');

# Create temp volume
my $volume_path = tempdir(
    "test_volume_XXXXXXX",
    DIR => $test_dir,
    CLEANUP => 1,
    UNLINK => 1,
);
my $volume = Genome::Disk::Volume->create(
    hostname => 'test',
    physical_path => 'test',
    mount_path => $volume_path,
    disk_status => 'active',
    can_allocate => 1,
    total_kb => Filesys::Df::df($volume_path)->{blocks},
);
ok($volume, 'created test volume');

my $assignment = Genome::Disk::Assignment->create(
    group => $group,
    volume => $volume,
);
ok($assignment, 'added volume to test group successfully');
Genome::Sys->create_directory(join('/', $volume->mount_path, $group->subdirectory));

# Make test allocation
my $allocation_path = tempdir(
    "allocation_test_1_XXXXXX",
    CLEANUP => 1,
    UNLINK => 1,
    DIR => $test_dir,
);
my $allocation = Genome::Disk::Allocation->create(
    disk_group_name => $group->disk_group_name,
    allocation_path => $allocation_path,
    kilobytes_requested => 100,
    owner_class_name => 'UR::Value',
    owner_id => 'test',
    mount_path => $volume->mount_path,
);
ok($allocation, 'created test allocation');
ok($allocation->preserved == 0, 'allocation is not preserved');

# Simulate command line execution
my @args = ('genome', 'disk', 'allocation', 'preserve', $allocation->id);
my $rv = Genome::Disk::Command::Allocation::Preserve->_execute_with_shell_params_and_return_exit_code(@args);
ok($rv == 0, 'successfully execute command using simulated command line arguments');
is($allocation->preserved, 1, 'allocation is preserved after executing command');

done_testing();

