#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above 'Genome';
use Test::More;

use File::Basename qw(dirname);

use lib File::Spec->join(dirname(__FILE__), 'Allocation', 't-lib');
use GenomeDiskAllocationCommon qw(create_test_volumes);

use File::stat qw(stat);

use_ok('Genome::Disk::Allocation') or die;
use_ok('Genome::Disk::Volume') or die;


my @volumes = create_test_volumes(1);


sub create_allocation_with_stuff {
    my $id = shift;
    my $a = Genome::Disk::Allocation->create(
        disk_group_name => $volumes[0]->disk_group_names,
        allocation_path => $id,
        owner_class_name => 'UR::Value',
        owner_id => "id-$id",
        kilobytes_requested => 1,
    );

    populate_allocation($a);

    return $a;
}

my @_DIRECTORIES = qw(
    foo
    foo/bar
);
my @_FILES = qw(
    baz.txt
    foo/buz.txt
    foo/bar/fiz.yml
);
sub populate_allocation {
    my $a = shift;
    for my $dir (@_DIRECTORIES) {
        mkdir File::Spec->join($a->absolute_path, $dir);
    }
    for my $file (@_FILES) {
        touch(File::Spec->join($a->absolute_path, $file));
    }
}

sub touch {
    for my $filename (@_) {
        open F, '>', $filename;
        close F;
    }
}

sub verify_permissions {
    my ($mode, $allocation, @items) = @_;
    for my $item (@items) {
        my $full_path = File::Spec->join($allocation->absolute_path, $item);
        my $sobj = stat $full_path;
        is($sobj->mode & 07777, $mode, "$item is read only");
    }
}

subtest 'set_file_permissions' => sub {
    plan tests => 2 * scalar(@_FILES);

    my $a = create_allocation_with_stuff('file-perm-test');

    $a->set_file_permissions(0444);
    verify_permissions(0444, $a, @_FILES);
    $a->set_file_permissions(0777);
    verify_permissions(0777, $a, @_FILES);
};

subtest 'set_dir_permissions' => sub {
    plan tests => 2 * scalar(@_DIRECTORIES);

    my $a = create_allocation_with_stuff('dir-perm-test');

    $a->set_directory_permissions(0555);
    verify_permissions(0555, $a, @_DIRECTORIES);
    $a->set_directory_permissions(0777);
    verify_permissions(0777, $a, @_DIRECTORIES);
};

subtest 'set_permissions_read_only' => sub {
    plan tests => scalar(@_DIRECTORIES) + scalar(@_FILES) + 1;

    my $a = create_allocation_with_stuff('all-perm-test');

    $a->set_permissions_read_only;

    verify_permissions(0444, $a, @_FILES);
    verify_permissions(0555, $a, @_DIRECTORIES, '.');
};


done_testing;
