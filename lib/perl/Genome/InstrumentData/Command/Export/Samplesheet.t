#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;
use above "Genome";
use File::Slurp qw(read_file);
use Test::More;
use Genome::Test::Factory::InstrumentData::Solexa;

my $pkg = 'Genome::InstrumentData::Command::Export::Samplesheet';
use_ok($pkg);


my @samples = map {
        Genome::Test::Factory::Sample->setup_object(name => "s_${pkg}_$_", source_id => $pkg)
        } 1..3;

my @libs = map {
        Genome::Test::Factory::Library->setup_object(sample => $_)
        } @samples;

my @idata = map {Genome::Test::Factory::InstrumentData::Solexa->setup_object(library => $_)} @libs;

my $output_path = Genome::Sys->create_temp_file_path;
my $output = Genome::File::Csv->create($output_path);
my $cmd = $pkg->create(
        instrument_data => \@idata,
        output_file => $output
        );

ok($cmd, "created command");
ok($cmd->execute, "executed command");
ok(-s $output_path, "output file exists");

my @lines = read_file($output_path);
chomp @lines;
my @fields = map {[split(",", $_, -1)]} @lines;
is($#lines, $#samples + 1, "Correct number of lines");

my $header = shift @fields;
my %cols = map {$header->[$_] => $_} 0..$#$header;

for my $idx (0..$#fields) {
    my $f = $fields[$idx];
    is($#$f, $#$header, "Line has same number of columns as header");
    is($f->[$cols{'sample.name'}], $samples[$idx]->name, "Sample name $idx");
    is($f->[$cols{'library.name'}], $libs[$idx]->name, "Lib name $idx");
    is($f->[$cols{'id'}], $idata[$idx]->id, "Inst data id $idx");
}

done_testing();
