#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
}

use strict;
use warnings;

use Test::More;

use above 'Genome';

use_ok('Genome::InstrumentData::Solexa') or die;

my $instrument_data = Genome::InstrumentData::Solexa->create(
    id => -7777,
    flow_cell_id => '12345',
    lane => '1',
    median_insert_size => '22',
    run_name => '110101_TEST',
    subset_name => 4,
    run_type => 'Paired',
    clusters => 300,
    fwd_clusters => 300,
    rev_clusters => 300,
    fwd_read_length => 50,
    rev_read_length => 50,
    bam_path => $ENV{GENOME_TEST_INPUTS} . '/Genome-InstrumentData-AlignmentResult-Bwa/input.bam',
);
ok($instrument_data, 'create inst data');

# Read/base counts
is($instrument_data->is_paired_end, 1, 'instrument data is paired end');
is($instrument_data->calculate_alignment_estimated_kb_usage, 117,'117kB disk needed for paired end instrument data');
is($instrument_data->total_bases_read('forward-only'), 15000, 'forward only total_bases_read on paired end instrument data');
is($instrument_data->total_bases_read('reverse-only'), 15000, 'reverse only total_bases_read on paired end instrument data');
is(
    $instrument_data->total_bases_read('forward-only') + $instrument_data->total_bases_read('reverse-only'),
    $instrument_data->total_bases_read,
    'forward and reverse pairs add up to total bases',
);
is($instrument_data->read_count, 600, 'read count');

# Trimmer conversion to SX
ok(!$instrument_data->_convert_trimmer_name_to_sx_command_parts('far-gone'), '"far-gone" is not an SX trimmer!');
is_deeply([$instrument_data->_convert_trimmer_name_to_sx_command_parts('far')], ['trim far'], '"far" is an SX trimmer and the command parts are ok!');
my @sx_cmd_parts = (
    'trim bwa-style --trim-qual-level 20',
    'filter by-min-length --length 45',
);
is_deeply(
    [$instrument_data->_convert_trimmer_name_to_sx_command_parts('gmt sx '.join('  |   ', @sx_cmd_parts))], 
    \@sx_cmd_parts,
    '"gmt sx '.join('  |   ', @sx_cmd_parts).'"  an SX trimmer and the command parts are ok!',
);
ok(
    !$instrument_data->_convert_trimmer_name_to_sx_command_parts(trimmer_name => '', trimmer_params => 'bar',),
    'Failed to convert trimmer params w/o trimmer name!',
);
ok(
    !$instrument_data->_convert_trimmer_name_to_sx_command_parts(trimmer_name => 'foo', trimmer_params => '',),
    'Failed to convert trimmer params w/o trimmer params!',
);
is(
    $instrument_data->_convert_trimmer_params_to_command_line_params(
        trimmer_name => 'dust-and-n-remove',
        trimmer_params => 'dust => 1, non_n_base_threshold => 50',
        trimmer_version => 2.0, # LEGACY: version is not passed through
    ),
    "--dust '1' --non-n-base-threshold '50'",
    'converted DUST AND N REMOVE trimmer params: "dust => 1, non_n_base_threshold => 50"',
);
is(
    $instrument_data->_convert_trimmer_params_to_command_line_params(
        trimmer_name => 'far',
        trimmer_params => '--fixed-pre-trim 150 --adapters /gscmnt/sata132/techd/twylie/2_x_250/ADAPTORS.fa --trim-end right --min-readlength 17 --nr-threads 4 --algorithm needlemanQuality --adaptive-overlap yes --format blah', 
        trimmer_version => '2.17',
    ),
    "--fixed-pre-trim '150' --adapters '/gscmnt/sata132/techd/twylie/2_x_250/ADAPTORS.fa' --trim-end 'right' --min-readlength '17' --nr-threads '4' --algorithm 'needlemanQuality' --adaptive-overlap 'yes' --version '2.17'",
    'converted trimmer FAR params: "--fixed-pre-trim 150 --adapters /gscmnt/sata132/techd/twylie/2_x_250/ADAPTORS.fa --trim-end right --min-readlength 17 --nr-threads 4 --algorithm needlemanQuality --adaptive-overlap yes --format blah"',
);

# Dump/Trim
my $tmpdir = File::Temp::tempdir(CLEANUP => 1);
# straight dump
my @fastq_pathnames = $instrument_data->dump_sanger_fastq_files(directory => $tmpdir);
is(@fastq_pathnames, 2, 'dump sanger fastq files');
# dump trimmed w/o trimming
my @trimmed_fastq_pathnames = $instrument_data->dump_trimmed_fastq_files(directory => $tmpdir);
is_deeply(\@fastq_pathnames, \@trimmed_fastq_pathnames, 'dump trimmed fastq files w/o trimming - matches untrimmed path names');
# dump sx 'new'
@trimmed_fastq_pathnames = $instrument_data->dump_trimmed_fastq_files(directory => $tmpdir, trimmer_name => 'gmt sx trim remove --length 10');
is(@trimmed_fastq_pathnames, 2, 'dump "new" sx trimmed sanger fastq files');
is(Genome::Sys->md5sum($trimmed_fastq_pathnames[0]), 'd9e3d9ee9b8c46b29b7d366affaae25d', 'trimmed fastq file 1 matches');
is(Genome::Sys->md5sum($trimmed_fastq_pathnames[1]), 'd46046c148dcf8437d023904c8d83679', 'trimmed fastq file 2 matches');
#print "$tmpdir\n"; <STDIN>;
for ( @trimmed_fastq_pathnames ) { unlink; }

# dump sx 'old'
@trimmed_fastq_pathnames = $instrument_data->dump_trimmed_fastq_files(directory => $tmpdir, trimmer_name => 'remove', trimmer_params => '--length 10');
is(@trimmed_fastq_pathnames, 2, 'dump "old" sx trimmed sanger fastq files');
is(Genome::Sys->md5sum($trimmed_fastq_pathnames[0]), 'd9e3d9ee9b8c46b29b7d366affaae25d', 'trimmed fastq file 1 matches');
is(Genome::Sys->md5sum($trimmed_fastq_pathnames[1]), 'd46046c148dcf8437d023904c8d83679', 'trimmed fastq file 2 matches');
#print "$tmpdir\n"; <STDIN>;
for ( @trimmed_fastq_pathnames ) { unlink; }

done_testing();
