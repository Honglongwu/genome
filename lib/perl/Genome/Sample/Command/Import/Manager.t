#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
}

use strict;
use warnings;

use above "Genome";
use Data::Dumper;
use Test::More;

use_ok('Genome::Sample::Command::Import::Manager') or die;
use_ok('Genome::Sample::Command::Import') or die;
Genome::Sample::Command::Import::_create_import_command_for_config({
        nomenclature => 'TeSt',
        name_regexp => '(TeSt-\d+)\-[\w\d]+\-\d\w\-\d+',
        taxon_name => 'human',
        #sample_attributes => [qw/ tissue_desc /],# tests array
        #individual_attributes => { # tests hash
        #    gender => { valid_values => [qw/ male female /], }, # tests getting meta from individual
        #    individual_common_name => {
        #        calculate_from => [qw/ _individual_name /],
        #        calculate => sub{ my $_individual_name = shift; $_individual_name =~ s/^TEST\-//i; return $_individual_name; },
        #    },
        #},
    });

my $manager = Genome::Sample::Command::Import::Manager->create(
    working_directory => 'example/valid',
);
ok($manager, 'create manager');
ok($manager->execute, 'execute');
is($manager->namespace, 'Test', 'got namespace');
is($manager->importer_class_name, 'Genome::Sample::Command::Import::Test', 'got importer class name');
my %expected_samples = ( 
    'TEST-0000-00' => {
        name => 'TEST-0000-00', 
        original_data_path => 'original.bam',
        from_csv => { race => 'spaghetti', gender => 'female', religion => 'pastafarian', },
        status => 'sample_needed',
        job_status => 'pend',
        sample => undef, inst_data => undef, bam_path => undef, model => undef, build => undef,
    },
);
my $samples = $manager->samples;
is_deeply($manager->samples, \%expected_samples, 'samples match');

$manager->is_executed(0); # reset
#$manager->execute;

# fail - no config file
$manager = Genome::Sample::Command::Import::Manager->create(
    working_directory => 'example/invalid/no-config-yaml',
);
ok($manager, 'create manager');
ok(!$manager->execute, 'execute');
is($manager->error_message, "Property 'config_file': Config file does not exist! ".$manager->config_file, 'correct error');

# fail - no config file
$manager = Genome::Sample::Command::Import::Manager->create(
    working_directory => 'example/invalid/no-sample-csv',
);
ok($manager, 'create manager');
ok(!$manager->execute, 'execute');
is($manager->error_message, "Property 'sample_csv_file': Sample csv file does not exist! ".$manager->sample_csv_file, 'correct error');

# fail - no name column in csv
$manager = Genome::Sample::Command::Import::Manager->create(
    working_directory => 'example/invalid/no-name-column-in-sample-csv',
);
ok($manager, 'create manager');
ok(!$manager->execute, 'execute');
is($manager->error_message, 'No "name" column in sample csv! '.$manager->sample_csv_file, 'correct error');

done_testing();
