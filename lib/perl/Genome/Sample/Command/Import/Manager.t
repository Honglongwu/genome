#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
}

use strict;
use warnings;

use above "Genome";
use Data::Dumper;
require Genome::Utility::Test;
use File::Temp;
use Test::More;

use_ok('Genome::Sample::Command::Import::Manager') or die;
use_ok('Genome::Sample::Command::Import') or die;
Genome::Sample::Command::Import::_create_import_command_for_config({
        nomenclature => 'TeSt',
        name_regexp => '(TeSt-\d+)\-\d\d',
        taxon_name => 'human',
        #sample_attributes => [qw/ tissue_desc /],# tests array
        #individual_attributes => { # tests hash
        #    gender => { valid_values => [qw/ male female /], }, # tests getting meta from individual
        #    individual_common_name => {
        #        calculate_from => [qw/ _individual_name /],
        #        calculate => sub{ my $_individual_name = shift; $_individual_name =~ s/^TEST\-//i; return $_individual_name; },
        #    },
        #},
    });

class Reference { has => [ name => {}, ], };
my $ref = Reference->create(id => -333, name => 'reference-1');
ok($ref, 'created reference');
class Genome::Model::Ref {
    is => 'Genome::Model',
    has_param => [
        aligner => { is => 'Text', },
    ],
    has_input => [
        reference => { is => 'Reference', },
    ],
};
sub Genome::Model::Ref::_execute_build { return 1; }
my $pp = Genome::ProcessingProfile::Ref->create(id => -333, name => 'ref pp #1', aligner => 'bwa');
ok($pp, 'create pp');

my $test_dir = Genome::Utility::Test->data_dir_ok('Genome::Sample::Command::Import::Manager', 'v3');
my $sample_name = 'TeSt-0000-00';
my $source_files = 'original.bam';
my $working_directory = File::Temp::tempdir(CLEANUP => 1);
my $info_tsv = $working_directory.'/info.tsv';
Genome::Sys->create_symlink($test_dir.'/valid-import-pend/info.tsv', $info_tsv);
my $config_yaml = $working_directory.'/config.yaml';
Genome::Sys->create_symlink($test_dir.'/valid-import-pend/config.yaml', $config_yaml);

# Do not make progress, just status
my $manager = Genome::Sample::Command::Import::Manager->create(
    working_directory => $working_directory,
);
ok($manager, 'create manager');
ok($manager->execute, 'execute');
is($manager->namespace, 'Test', 'got namespace');
my $sample_hash = eval{ $manager->samples->{$source_files}; };
ok($sample_hash, 'sample hash');
is($sample_hash->{status}, 'sample_needed', 'sample hash status');
ok(-s $manager->status_file, 'status file created');

# Import command
is(
    $manager->_resolve_instrument_data_import_command_for_sample($sample_hash),
    "echo $sample_name genome instrument-data import basic --sample name=$sample_name --source-files original.bam --import-source-name TeSt --instrument-data-properties lane='8'",
    'inst data import command',
);
ok($manager->_launch_instrument_data_import_for_sample($sample_hash), 'launch inst data import command');

# Make progress: create sample, model and 'import' (it thinks it is importing b/c of the command used in the config file)
$manager = Genome::Sample::Command::Import::Manager->create(
    working_directory => $working_directory,
     launch_imports => 1,
);
ok($manager, 'create manager');
ok($manager->execute, 'execute');
is($manager->namespace, 'Test', 'got namespace');
$sample_hash = eval{ $manager->samples->{$source_files}; };
ok($sample_hash, 'sample hash');
is($sample_hash->{status}, 'import_pend', 'sample hash status');
ok($sample_hash->{model}, 'sample hash model');
is($sample_hash->{job_status}, 'pend', 'sample hash job status');
ok(!$sample_hash->{model}->auto_assign_inst_data, 'model auto_assign_inst_data is off');
ok(!$sample_hash->{model}->auto_build_alignments, 'model auto_build_alignments is off');
ok(!$sample_hash->{model}->build_requested, 'model build_requested is off');
ok(!$sample_hash->{model}->instrument_data, 'model does not have instrument data assigned');
ok(!$sample_hash->{build}, 'sample hash build');

# Make progress: create inst data here, it should get assigned to the model and build should be requested
my $inst_data = Genome::InstrumentData::Imported->__define__(
    original_data_path => $sample_hash->{source_files},
    sample => $sample_hash->{sample},
    subset_name => '1-XXXXXX',
    sequencing_platform => 'solexa',
    import_format => 'bam',
    description => 'import test',
);
$inst_data->add_attribute(attribute_label => 'bam_path', attribute_value => $manager->config_file);
$inst_data->add_attribute(attribute_label => 'read_count', attribute_value => 1000);
$inst_data->add_attribute(attribute_label => 'read_length', attribute_value => 100);

unlink($info_tsv, $config_yaml);
Genome::Sys->create_symlink($test_dir.'/valid-build/info.tsv', $info_tsv);
Genome::Sys->create_symlink($test_dir.'/valid-build/config.yaml', $config_yaml);

$manager = Genome::Sample::Command::Import::Manager->create(
    working_directory => $working_directory,
    start_builds => 1,
);
ok($manager, 'create manager');
ok($manager->execute, 'execute');
$sample_hash = eval{ $manager->samples->{$source_files}; };
ok($sample_hash, 'sample hash');
is($sample_hash->{status}, 'build_scheduled', 'sample hash status');
ok($sample_hash->{model}, 'sample hash model');
ok($sample_hash->{build}, 'build created');
is_deeply([$sample_hash->{model}->instrument_data], [$inst_data], 'model has instrument data assigned');

# fail - no config file
$manager = Genome::Sample::Command::Import::Manager->create(
    working_directory => $test_dir.'/invalid-no-config-yaml',
);
ok($manager, 'create manager');
ok(!$manager->execute, 'execute');
is($manager->error_message, "Property 'config_file': Config file does not exist! ".$manager->config_file, 'correct error');

# fail - no config file
$manager = Genome::Sample::Command::Import::Manager->create(
    working_directory => $test_dir.'/invalid-no-info-file',
);
ok($manager, 'create manager');
ok(!$manager->execute, 'execute');
is($manager->error_message, "Property 'info_file': Sample info file does not exist! ".$manager->info_file, 'correct error');

# fail - no name column in csv
$manager = Genome::Sample::Command::Import::Manager->create(
    working_directory => $test_dir.'/invalid-no-name-column-in-info-file',
);
ok($manager, 'create manager');
ok(!$manager->execute, 'execute');
is($manager->error_message, 'Property \'info_file\': No "name" column in sample info file! '.$manager->info_file, 'correct error');

done_testing();
