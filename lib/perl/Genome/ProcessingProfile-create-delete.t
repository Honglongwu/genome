#!/usr/bin/env genome-perl

# Simple test to create a processing profile, save it, delete it, save again

use strict;
use warnings;

use Test::More tests => 7;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use Genome;
use Sys::Hostname;

# used for everything below which requires a name
my $tname = "test-new-processing-profile-$$-".Sys::Hostname::hostname();

# define a processing profile subclass for this pipeline
class Genome::ProcessingProfile::Foo {
    is => 'Genome::ProcessingProfile',
    has_param => [
        p1 => { doc => 'param 1' },
        p2 => { doc => 'param 2' },
    ]
};

# make a profile mixing scalar params and objects
my $p0 = Genome::ProcessingProfile::Foo->create(
    name => $tname,
    p1 => 'value1', 
    p2 => 'value2',
);
ok($p0, "made a new profile");
is($p0->name, $tname, "got back name");
is($p0->p1, 'value1', "got back p1 value 'value1'");
is($p0->p2, 'value2', "got back p2 value 'value2'");

ok(eval { UR::Context->commit() }, 'Changes committed to DB');
diag("Exception when saving: $@") if $@;


$p0->delete;
isa_ok($p0, 'UR::DeletedRef', "deleted test processing profile successfully");


ok(eval { UR::Context->commit() }, 'Deletion committed to DB');
diag("Exception when saving: $@") if $@;


my @pk = UR::DataSource::RDBMS::PkConstraintColumn->get(data_source => 'Genome::DataSource::GMSchema', table_name => 'PROCESSING_PROFILE_PARAM');
