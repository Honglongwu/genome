#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
};

use strict;
use warnings;

use above 'Genome';

use Test::More;

use_ok('Genome::Site::TGI::Synchronize::Classes::MiscUpdate::SubjectAttribute') or die;

my $cnt = 0;

# Define misc updates
my @multi_misc_updates = _define_multiple_misc_updates();
ok(@multi_misc_updates, 'Define multi misc updates');
is(@multi_misc_updates, 4, 'Defined 4 multi misc updates');
is(scalar( map { $_->misc_updates } @multi_misc_updates), 12, 'Defined 12 misc updates');

# Failure No genome entity
ok($multi_misc_updates[0]->perform_update, 'perform update: '.$multi_misc_updates[0]->description);
is($multi_misc_updates[0]->status_message, 'No genome subject for id! -200', 'Correct msg');
is($multi_misc_updates[0]->result, 'SKIP', 'Correct result');

# Define subjects
my @subjects = _define_subjects();
is(@subjects, 2, 'Define subjects');

# Success
for my $multi_misc_update ( @multi_misc_updates ) {
    ok($multi_misc_update->perform_update, 'performed update: '.$multi_misc_update->description);
    my %genome_entity_params = $multi_misc_update->_resolve_genome_entity_params;
    ok(%genome_entity_params, 'Got genome entity params');
    is(scalar(keys %genome_entity_params), 4, 'Correct number of genome entity params');
    my $genome_entity = Genome::SubjectAttribute->get(%genome_entity_params);
    if ( $multi_misc_update->description eq 'INSERT' ) {
        ok($genome_entity, 'INSERT genome entity: '.$genome_entity->__display_name__);
        is($multi_misc_update->value_method, 'new_value', 'Correct value method');
    }
    else {
        ok(!$genome_entity, 'DELETE genome entity: '.$multi_misc_update->__display_name__);
        is($multi_misc_update->value_method, 'old_value', 'Correct value method');
    }
    is($multi_misc_update->result, $multi_misc_update->description, 'Correct result');
    ok(!$multi_misc_update->error_message, 'No errors set on multi misc update!');
    is(scalar(grep {defined} map {$_->error_message} $multi_misc_update->misc_updates), 0, 'No errors set on misc updates!');
}

# Failures
# no misc updates
my %multi_misc_update_params = (
    subject_class_name => 'test.sample_attribute',
    subject_id => join('-', 'sample_attribute', -100, 'foo', 'bar', 'baz'),
    description => 'INSERT',
    edit_date => '2000-01-01 00:00:'.sprintf('%02d', $cnt++),
);
my $multi_misc_update = Genome::Site::TGI::Synchronize::Classes::MiscUpdate::SubjectAttribute->create(%multi_misc_update_params);
ok(!$multi_misc_update->perform_update, 'Failed to perform update w/o misc updates');
is($multi_misc_update->error_message, 'No misc updates set to get genome entity params!', 'Correct error');
is($multi_misc_update->result, 'FAILED', 'Correct result');

# Missing required key
$multi_misc_update->add_misc_update(($multi_misc_updates[0]->misc_updates)[0]);
ok(!$multi_misc_update->perform_update, 'Failed to perform update w/o misc updates');
is($multi_misc_update->error_message, 'Missing required key (attribute_value) in genome entity params!', 'Correct error');
is($multi_misc_update->result, 'FAILED', 'Correct result');

done_testing();

sub _define_subjects {
    ok(push(@subjects, Genome::Sample->__define__(id => -100)), 'define sample');
    ok(push(@subjects, Genome::PopulationGroup->__define__(id => -200)), 'define population group');
    return @subjects;
}

sub _define_multiple_misc_updates {
    my %subject_class_names_to_properties= (
        population_group_member => [qw/ pg_id member_id /],
        sample_attribute => [qw/ organism_sample_id attribute_label attribute_value nomenclature /],
    );

    my @misc_updates;
    for my $update ( [ 'population_group_member', -200, -101, ], [ 'sample_attribute', -100, 'foo', 'bar', 'baz',  ], ) {
        my ($subject_class_name, @ids) = @$update;
        my $subject_id = join('-', @ids);
        for my $description (qw/ INSERT DELETE /) {
            my %multi_misc_update_params = (
                subject_class_name => 'test.'.$subject_class_name,
                subject_id => $subject_id,
                description => $description,
                edit_date => '2000-01-01 00:00:'.sprintf('%02d', $cnt++),
            );
            my $multi_misc_update = Genome::Site::TGI::Synchronize::Classes::MiscUpdate::SubjectAttribute->create(%multi_misc_update_params);
            push @multi_misc_updates, $multi_misc_update;
            my $subject_property_names = $subject_class_names_to_properties{$subject_class_name};
            for ( my $i = 0; $i < @{$subject_class_names_to_properties{$subject_class_name}}; $i++ ) {
                my $misc_update = Genome::Site::TGI::Synchronize::Classes::MiscUpdate->__define__(
                    %multi_misc_update_params,
                    subject_property_name => $subject_class_names_to_properties{$subject_class_name}->[$i],
                    editor_id => 'lims',
                    old_value => ( $description eq 'DELETE' ? $ids[$i] : undef ),
                    new_value => ( $description eq 'INSERT' ? $ids[$i] : undef ),
                    is_reconciled => 0,
                );
                $multi_misc_update->add_misc_update($misc_update);
            }
        }
    }

    return @multi_misc_updates;
}

1;
