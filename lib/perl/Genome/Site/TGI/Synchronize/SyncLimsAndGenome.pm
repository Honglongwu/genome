package Genome::Site::TGI::Synchronize::SyncLimsAndGenome;

use strict;
use warnings;
use Genome;

class Genome::Site::TGI::Synchronize::SyncLimsAndGenome {
    is => 'Command::V2',
    has_optional_transient => [
        _report => {
            is_transient => 1,
            doc => 'Contains hashref to report generated by the execution of this tool',
        },
    ],
    doc => 'This command copies new objects in the old LIMS based classes to the new classes that use the MG schema. ' .
        'It then removes all non-imported instrument data that are no longer represented in the LIMS based classes', 
};

sub execute {
    my $self = shift; 

    my $update = Genome::Site::TGI::Synchronize::UpdateApipeClasses->create();
    die "Failed to create update apipe classes!" if not $update;
    my $rv = eval{ $update->execute; };
    if (not $rv) {
        die $self->error_message("$@\nFailed to execute update apipe classes!");
    }
    $self->_report($update->report);

    my $expunge = $self->expunge;
    unless ($expunge) {
        $self->error_message("Failed to Expunge: $@");
        die $self->error_message;
    }

    my $report_string = $self->generate_report;
    print $report_string;

    return 1;
}

sub generate_report {
    my $self = shift;

    my %report = %{$self->_report};
    my $string;
    for my $type (sort keys %report) {
        $string .= "Type $type";
        for my $operation (qw/ copied missing deleted /) {
            my $num = 0;
            if (exists $report{$type}{$operation}) {
                $num = scalar @{$report{$type}{$operation}};
            }
            $string .= (', ' . (ucfirst $operation) . " $num");
        }
        $string .= "\n";
    }
    return $string;
}

sub expunge {
    my $self = shift;

    my $report = $self->_report;

    my $dictionary = Genome::Site::TGI::Synchronize::Classes::Dictionary->get;
    for my $entity_name (keys %$report){
        my $lims_class = $dictionary->lims_class_for_entity_name($entity_name);
        my $class = $lims_class->genome_class_for_create;
        next unless $class =~ m/Genome::InstrumentData/; #only remove instrument data for now
        next if $class eq 'Genome::InstrumentData::Imported'; #imported instrument data doesn't come from LIMS, so skip it
        my @ids = @{$report->{$class}->{missing}} if $report->{$class}->{missing};
        next if not @ids;
        printf("DELETING %s %s\n", $class, join(' ', @ids));
        my @deleted;
        for my $id (@ids){
            my $successfully_deleted = $self->_remove_expunged_object($class, $id);
            push @deleted, $successfully_deleted;
        }
        $report->{$class}->{deleted} = \@deleted;
    }

    $self->_report($report);

    return 1;
}

sub _remove_expunged_object {
    my $self = shift;
    my $class = shift;
    my $id = shift;

    my $object = $class->get($id);

    $object->delete;

    return $id;
}

1;

