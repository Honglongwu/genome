package chimerascan_test_create;

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above 'Genome';
use Test::More;

require Exporter;
our @ISA = qw(Exporter);
our @EXPORT_OK = qw(test_create);

sub test_create {
    my %parameters = @_;
    my $chimerascan_result_class = $parameters{chimerascan_result_class};
    my $chimerascan_version = $parameters{chimerascan_version};
    my $picard_version = $parameters{picard_version};
    my $alignment_result = $parameters{alignment_result};
    my $annotation_build = $parameters{annotation_build};

    use_ok($chimerascan_result_class, "Can use result class");

    my %params = (
        alignment_result => $alignment_result,
        version => $chimerascan_version,
        detector_params => "--reuse-bam 0 --bowtie-version=",
        annotation_build => $annotation_build,
        picard_version => $picard_version,
    );
    my $class = 'Genome::Model::RnaSeq::DetectFusionsResult::ChimerascanVrlResult';

    test_for_error($class, \%params, "You must supply a bowtie version");

    # needs --bowtie-version
    $params{'detector_params'} = "--reuse-bam 0";
    test_for_error($class, \%params, "Couldn't find parameter");

    # invalid bowtie version for chimerascan-vrl
    $params{'detector_params'} = "--bowtie-version 2.0.0 --reuse-bam 0", # --bowtie-version=2.0.0
              # space or = are both valid syntax  ^ here    or here ^              or here ^
    test_for_error($class, \%params, "Currently chimerascan only supports");

    # invalid value for --reuse-bam
    $params{'detector_params'} = "--bowtie-version 0.12.7 --reuse-bam bad";
    test_for_error($class, \%params, "You must specify either 1 (true) or 0 (false) for parameter");

    # should fail since -n must be an integer
    #   chimerascan_run.py: error: option -n: invalid integer value: 'a'
    $params{'detector_params'} = "--bowtie-version 0.12.7 --reuse-bam 0 -n a";
    test_for_error($class, \%params, "ERROR RUNNING COMMAND");

    # should fail because trimmed reads are shorter than segment length
    #   min_read_length after trimming: -74
    #   max_read_length after trimming: 1
    #   seed length (25) cannot be longer than read length (-74)
    #   Checking for 'bowtie-build' binary... found
    #   Checking for 'bowtie' binary... found
    #   Checking for chimerascan index directory... found
    #   Checking for bowtie index file... found
    #   Invalid run configuration, aborting.
    $params{'detector_params'} = "--bowtie-version 0.12.7 --reuse-bam 0 --trim5 100";
    test_for_error($class, \%params, "ERROR RUNNING COMMAND");
}

sub test_for_error {
    my ($class, $params, $expected_error) = @_;

    eval {
        my $result = $class->get_or_create(%{$params});
        die "failed test";
    };
    if ($@) {
        my $error_str = $@;
        chomp $error_str;
        diag "Got: \"$error_str\"";
        ok($error_str =~ m/\Q$expected_error\E/, "Crashed as expected with \"$expected_error\"");
    }
}

1;
