#!/usr/bin/env genome-perl5.10

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{NO_LSF} = 1;
};


#Instructions for creating a new test result:
#0.) Merge the master branch into your clinseq branch
#1.) Then check this script to make sure that the test is being run on the data that you want: individual common name, wgs model, exome model, rnaseq model
#2.) Log into a blade server and check the /tmp directory to make sure it does not already contain a set of clinseq results ('/tmp/last-clinseq-test-result/')
#3.) Run the ClinSeq.t test without the RUN parameter to make sure it compiles and passes all tests.
#4.) Run the ClinSeq.t test with the RUN parameter from your ClinSeq git branch
#    $ cd lib/perl/Genome/Model
#    $ ./ClinSeq.t RUN
# - It will fail because the diff fails, but it will leave the results in a directory in /tmp.
#5.) Move the test results to the main test results dir
# - You will see the path of the comparision data, and you want to copy your new results from /tmp to a directory next-to the comparison one, but with a new date.
# - Test results go here
# - $ENV{GENOME_TEST_INPUTS}Genome-Model-ClinSeq/DATE
#6.) Then you'll change the line in the test script to point to your new directory:
# e.g.  my $expected_data_directory = $ENV{"GENOME_TEST_INPUTS"} . '/Genome-Model-ClinSeq/2011-12-10';
#7.) Run the test again and ensure it passes with "RUN"
#    $ cd lib/perl/Genome/Model
#    $ ./ClinSeq.t RUN
#8.) Then commit and push changes to the clinseq branch
#9.) Then commit, push, and merge into master.
#    - The important thing is that the merge into master includes the code changes, and also the test change to point to a different comparison dir.

use above "Genome";
use Test::More;
use Genome::Model::ClinSeq;

my $dry_run;
if (@ARGV and $ARGV[0] eq 'RUN') {
    note("NOT A DRY RUN...");
    $dry_run = 0;
}
else {
    note("DRY RUN... put 'RUN' on the command line for this test to actually generate and compare results");
    $dry_run = 1;
}
plan tests => 15;

my $patient = Genome::Individual->get(common_name => "PNC6");
ok($patient, "got the PNC6 patient");


my $tumor_rna_sample = $patient->samples(name => "H_LF-09-213F-1221858");
ok($tumor_rna_sample, "found the tumor RNA sample");

my $tumor_genome_sample = $patient->samples(name => "H_LF-09-213F-1221853");
ok($tumor_genome_sample, "found the tumor genome sample");

my $normal_genome_sample = $patient->samples(name => "H_LF-09-213F-1221853");
ok($normal_genome_sample, "found the normal genome sample");

my $tumor_rnaseq_model = Genome::Model::RnaSeq->get(
    id => 2888811351,
);
ok($tumor_rnaseq_model, "got the RNASeq model");

my $wgs_model = Genome::Model::SomaticVariation->get(
    id => 2888915570, 
);
ok($wgs_model, "got the WGS Somatic Variation model");

my $exome_model = Genome::Model::SomaticVariation->get(
    id => 2888844901,
);
ok($exome_model, "got the exome Somatic Variation model");

my $p = Genome::ProcessingProfile::ClinSeq->create(
    id   => -10002,
    name => 'TESTSUITE ClinSeq Profile 2',
);
ok($p, "created a processing profile") or diag(Genome::ProcessingProfile::ClinSeq->error_message);

my $m = $p->add_model(
    name            => 'TESTSUITE-clinseq-model2',
    subclass_name   => 'Genome::Model::ClinSeq',
    subject         => $patient,
);
ok($m, "created a model") or diag(Genome::Model->error_message);

my $i1 = $m->add_input(
    name => 'wgs_model',
    value => $wgs_model, 
);
ok($i1, "add a wgs model to it");

my $i2 = $m->add_input(
    name => 'exome_model',
    value => $exome_model, 
);
ok($i2, "add a exome model to it");

my $i3 = $m->add_input(
    name => 'tumor_rnaseq_model',
    value => $tumor_rnaseq_model, 
);
ok($i3, "add a tumor rnaseq model to it");

# this will prevent disk allocation during build initiation
# we will have to turn this off if the tasks in this pipeline spread to other machines
my $temp_dir = Genome::Sys->create_temp_directory("dummy-clinseq-build-dir");

my $b = $m->add_build(
    data_directory => $temp_dir,
);
ok($b, "created a new build");

# we would normally do $build->start() but this is easier to debug minus workflow guts when you just call _execute_build
if ($dry_run) {
    my @errors = $b->validate_for_start;
    is(scalar(@errors), 0, "build is valid to start")
        or diag(join("\n",@errors));
    my $wf = $b->_initialize_workflow("inline");
    ok($wf, "workflow validates");
    note("exiting without running the pipeline because RUN was not manually specified");
}
else {
    # this is very slow, but tests the pipeline the same way the build tests test the pipeline
    $ENV{PERL5LIB} = UR::Util->used_libs_perl5lib_prefix . "::" . $ENV{PERL5LIB};
    $b->start(
        server_dispatch => 'inline',
        job_dispatch    => 'inline',
    );
    is($b->status, 'Succeeded', "build succeeded!");

    # perform a diff between the stored results and the newly generated directory of results
    my $expected_data_directory = $ENV{"GENOME_TEST_INPUTS"} . '/Genome-Model-ClinSeq/2012-11-27';
    #print "\n\n$expected_data_directory\n\n";
    
    # add a masked version of the clonality tsv since it has non-deterministic output in the final column
    my $mask_command = 'cat ' 
        . $temp_dir 
        . q{/PNC6/clonality/PNC6.clustered.data.tsv | perl -nae '$F[-1] = "?"; print join("\t",@F),"\n"' } 
        . ' >| ' . $temp_dir . q{/PNC6/clonality/PNC6.clustered.data.tsv.testmasked};
    Genome::Sys->shellcmd(cmd => $mask_command);

    #Exclude some files from the diff that tend to change when regenerated for the same build
    my @diff = `diff -r --brief -x 'logs/*' -x 'build.xml' -x 'reports/*' -x '*.R' -x '*.pdf' -x '*.mutation-diagram.stderr' -x '*_COSMIC.svg' -x '*.clustered.data.tsv' -x 'SummarizeBuilds.log.tsv' -x 'DumpIgvXml.log.txt' $expected_data_directory $temp_dir`;
    ok(@diff == 0, "no differences from expected results and actual")
        or do { 
            diag("differences are:");
            diag(@diff);
            Genome::Sys->shellcmd(cmd => "mv $temp_dir /tmp/last-clinseq-test-result");
        };
}
