#!/gsc/bin/perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Genome::Model::Build::SomaticVariationTestGenerator;

use_ok("Genome::Model::Build::SomaticVariation");

my ($b, $m) = Genome::Model::Build::SomaticVariationTestGenerator::setup_test_build();
ok($m, "Created SomaticVariation model");
ok($b, "Created SomaticVariation build");

test_build_inputs_dont_reference_model();
test_annotation_build_accessor();
done_testing();

# these tests may seem obvious, but the build USED to reference model inputs directly.
sub test_build_inputs_dont_reference_model {
    is($b->previously_discovered_variations_build->id,
            $m->previously_discovered_variations_build->id,
            'Build has previously_discovered_variations_build from model');

    my $pdv_build = $m->previously_discovered_variations;
    my $pdv_build_2 = Genome::TestObjGenerator::Build->setup_object(model_id => $m->id);

    # change a model input
    $m->previously_discovered_variations($pdv_build_2);
    is($m->previously_discovered_variations_build->id,
            $pdv_build_2->id, "Updated model input");

    # check to make sure the old build's input is the same
    is($b->previously_discovered_variations_build->id,
            $pdv_build->id, "Build input did not change when model input was updated");
}

sub test_annotation_build_accessor {
    is($b->annotation_build, $m->annotation_build, "Annotation build is the same as the model build")
}
