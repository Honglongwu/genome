#!/usr/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use File::Slurp qw(write_file);
use Genome::Test::Factory::Model::ImportedReferenceSequence;
use Genome::Test::Factory::Build;
use Sub::Install qw(reinstall_sub);

my $pkg = 'Genome::Model::ReferenceSequence::Command::CreateFeatureListInput';
use_ok($pkg) or die;

my $model = Genome::Test::Factory::Model::ImportedReferenceSequence->setup_object();
my $build = Genome::Test::Factory::Build->setup_object(model_id => $model->id);

reinstall_sub({
    into => 'Genome::Model::Build::ReferenceSequence',
    as => 'chromosome_array_ref',
    code => sub {return [qw(1 2 3 4)]},
});

my $input_name = 'test_input';
my $test_input;
reinstall_sub({
    into => 'Genome::Model::Build::ReferenceSequence',
    as => $input_name,
    code => sub {my ($self,$value) = @_; if(defined $value) {$test_input = $value;} return $test_input;},
});

my $bed_line_1 = join("\t", qw(1 100 100), "\n");
my $bed_line_2 = join("\t", qw(2 100 100), "\n");
my $bed_file = Genome::Sys->create_temp_file_path;
write_file($bed_file, $bed_line_1, $bed_line_2);

my $cmd = $pkg->create(
    bed_file => $bed_file,
    build => $build,
    input_name => $input_name,
    feature_list_name => 'test_feature_list',
);
isa_ok($cmd, $pkg);

ok($cmd->execute, "$pkg command executed successfully");

isa_ok($build->$input_name, 'Genome::FeatureList');

subtest 'bad input_name' => sub {
    my $cmd_fail = $pkg->create(
        bed_file => $bed_file,
        build => $build,
        input_name => 'not_valid',
        feature_list_name => 'test_feature_list',
    );
    dies_ok(sub {$cmd_fail->execute;}, 'Execute fails for a bad input_name');
};

subtest 'bed file is not a subset' => sub {
    my $bad_bed_line_1 = join("\t", qw(1 100 100), "\n");
    my $bad_bed_line_2 = join("\t", qw(Z 100 100), "\n");
    my $bad_bed_file = Genome::Sys->create_temp_file_path;
    write_file($bad_bed_file, $bad_bed_line_1, $bad_bed_line_2);
    my $cmd_fail = $pkg->create(
        bed_file => $bad_bed_file,
        build => $build,
        input_name => $input_name,
        feature_list_name => 'test_feature_list',
    );
    dies_ok(sub {$cmd_fail->execute;}, 'Execute fails for a bad bed file');
};

done_testing();
