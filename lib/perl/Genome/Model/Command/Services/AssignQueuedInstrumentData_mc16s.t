#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
}

use above 'Genome';

use Data::Dumper;
use Test::MockObject;
use Test::More;

use_ok('Genome::Model::Command::Services::AssignQueuedInstrumentData') or die;

my $qidfgm_cnt = 0;
my $sample_cnt = 0;
my (@samples, @instrument_data, @pses, @pse_params);

# GSC Reasearch Project
my @projects;
push @projects, Genome::Project->create(id => -111, name => '__TEST_PROJECT__');
ok($projects[0], 'create project for research project');
my $gsc_workorder = Test::MockObject->new();
$gsc_workorder->set_always(pipeline => '16S 454');
# GSC WorkOrder
push @projects, Genome::Project->create(id => -222, name => '__TEST_WORKORDER__');
ok($projects[1], 'create project for research project');
# Model groups for projects
my @model_groups = Genome::ModelGroup->get(uuid => [ map { $_->id } @projects ]);
is(@model_groups, @projects, 'created model groups');

no warnings;
*Genome::InstrumentDataAttribute::get = sub {
    my ($class, %params) = @_;
    my %attrs = map { $_->id => $_ } map { $_->attributes } @instrument_data;
    for my $param_key ( keys %params ) {
        my @unmatched_attrs = grep { $_->$param_key ne $params{$param_key} } values %attrs;
        for my $unmatched_attr ( @unmatched_attrs ) { delete $attrs{ $unmatched_attr->id } }
    }
    return values %attrs;
};
sub GSC::PSE::get { return grep { not $_->completed } @pses; }
sub GSC::Setup::WorkOrder::get { return $gsc_workorder; }
use warnings;

for my $i (1..2) {
    ok(_qidfgm(), 'create qidfgm');
}
is(@instrument_data, $qidfgm_cnt, "create $qidfgm_cnt inst data");
is(@pses, $qidfgm_cnt, "create $qidfgm_cnt pses");

my $cmd = Genome::Model::Command::Services::AssignQueuedInstrumentData->create;
ok($cmd, 'create aqid');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
my @new_models = values %{$cmd->_newly_created_models};
my %new_models = _model_hash(@new_models);
my @existing_models = values %{$cmd->_existing_models_assigned_to};
my %existing_models = _model_hash(@existing_models);
#print Dumper(\%new_models,\%existing_models);
my $model_name_for_entire_run = "R_2011_07_27_14_54_40_FLX08080419_Administrator_113684816_r1.prod-mc16s-qc";
is_deeply(
    \%new_models,
    {
        "AQID-testsample1.prod-mc16s.rdp2-2" => {
            subject => $samples[0]->name,
            processing_profile_id => Genome::Model::MetagenomicComposition16s->default_processing_profile_id,
            inst => [ $instrument_data[0]->id ],
            auto_assign_inst_data => 1,
        },
        "AQID-testsample2.prod-mc16s.rdp2-2" => {
            subject => $samples[1]->name,
            processing_profile_id => Genome::Model::MetagenomicComposition16s->default_processing_profile_id,
            inst => [ $instrument_data[1]->id ],
            auto_assign_inst_data => 1,
        },
        $model_name_for_entire_run => {
            subject => "Human Metagenome",
            processing_profile_id => Genome::Model::MetagenomicComposition16s->default_processing_profile_id,
            inst => [ map { $_->id } @instrument_data ],
            auto_assign_inst_data => 0,
        },
    },
    'new models for run 1',
);
is_deeply(
    \%existing_models, 
    { $model_name_for_entire_run => $new_models{$model_name_for_entire_run} },
    'existing models for run 1',
);

ok(_qidfgm(), 'made another qdidfgm');
ok(_qidfgm(sample_name => 'n-ctrl'), 'create qidfgm'); # pse for negative control sample
ok(_qidfgm(read_count => 0), 'create qidfgm'); # pse for read count 0 inst data
is(@instrument_data, $qidfgm_cnt, "$qidfgm_cnt inst data");
is(@pses, $qidfgm_cnt, "$qidfgm_cnt pses");

$cmd = Genome::Model::Command::Services::AssignQueuedInstrumentData->create;
ok($cmd, 'create aqid');
$cmd->dump_status_messages(1);
ok($cmd->execute, 'execute');
@new_models = values %{$cmd->_newly_created_models};
%new_models = _model_hash(@new_models);
@existing_models = values %{$cmd->_existing_models_assigned_to};
%existing_models = _model_hash(@existing_models);
#print Dumper(\%new_models,\%existing_models);
is_deeply(
    \%new_models,
    {
        "AQID-testsample3.prod-mc16s.rdp2-2" => {
            subject => $samples[2]->name,
            processing_profile_id => Genome::Model::MetagenomicComposition16s->default_processing_profile_id,
            inst => [ $instrument_data[2]->id ],
            auto_assign_inst_data => 1,
        },
    },
    'new models for run 2',
);
is_deeply(
    \%existing_models,
    {
        $model_name_for_entire_run => {
            subject => "Human Metagenome",
            processing_profile_id => Genome::Model::MetagenomicComposition16s->default_processing_profile_id,
            inst => [ map { $_->id } grep { $_->sample_name ne 'n-ctrl' } @instrument_data ],
            auto_assign_inst_data => 0,
        },
    },
    'existing models for run 2',
);
is( # processed all
    scalar(grep { $_->attributes(attribute_label => 'tgi_lims_status')->attribute_value  eq 'processed' } @instrument_data),
    5,
    'set tgi lims status to processed for all instrument data',
);
is( # ignored 2
    scalar(grep { $_->ignored } @instrument_data),
    2,
    'ignored 2 instrument data',
);

done_testing();
exit;

my $source;
sub _qidfgm {
    my %incoming_params = @_;
    $qidfgm_cnt++;

    $source = Genome::PopulationGroup->__define__(name => '__TEST_POP_GROUP__', taxon => Genome::Taxon->__define__(name => 'Human Metagenome')) if not $source;
    ok($source, 'define source');

    my $sample_name = ( exists $incoming_params{sample_name} ? delete $incoming_params{sample_name} : 'AQID-testsample'.++$sample_cnt );
    my $sample = Genome::Sample->create(
        name => $sample_name,
        extraction_type => 'genomic',
        source => $source,
    );
    ok($sample, 'sample '.$sample_cnt);
    push @samples, $sample;
    my $library = Genome::Library->create(
        name => $sample->name.'-testlib',
        sample_id => $sample->id,
    );
    ok($library, 'create library '.$qidfgm_cnt);

    my $instrument_data = Genome::InstrumentData::454->create(
        library_id => $library->id,
        run_name => 'R_2011_07_27_14_54_40_FLX08080419_Administrator_113684816',
        region_number => 1,
        read_count => ( exists $incoming_params{read_count} ? delete $incoming_params{read_count} : 1 ),
    );
    ok($instrument_data, 'created instrument data '.$qidfgm_cnt);
    $instrument_data->add_attribute(
        attribute_label => 'tgi_lims_status',
        attribute_value => 'new',
    );
    push @instrument_data, $instrument_data;
    for my $project ( @projects ) {
        $project->add_part(
            entity_id => $instrument_data->id,
            entity_class_name => 'Genome::InstrumentData',
            label => 'instrument_data',
        );
    }

    my $pse = Test::MockObject->new();
    $pse->set_always(id => $qidfgm_cnt - 10000);
    $pse->set_always(pse_id => $qidfgm_cnt - 10000);
    $pse->set_always(ps_id => 3733);
    $pse->set_always(ei_id => '464681');
    $pse->set_false('completed');
    $pse->mock(pse_status => sub{ $pse->set_true('completed'); });
    my %params = (
        instrument_data_type => '454',
        instrument_data_id => $instrument_data->id,
        subject_class_name => 'Genome::Sample',
        subject_id => $sample->id,
        processing_profile_id => 2571784,
    );
    $pse->mock(
        add_param => sub{
            my ($pse, $key, $value) = @_;
            my $param = Test::MockObject->new();
            push @pse_params, $param;
            $param->set_always(pse_id => $pse->id);
            $param->set_always(param_name => $key);
            $param->set_always(param_value => $params{$key});
            return $param;
        }
    );
    for my $key ( keys %params ) {
        $pse->add_param($key, $params{$key});
    }
    $pse->mock(
        added_param => sub{
            my ($pse, $key) = @_;
            return $params{$key};
        }
    );
    push @pses, $pse;
    return 1;
}

sub _model_hash {
    return map { 
        $_->name => { 
            subject => $_->subject_name, 
            processing_profile_id => $_->processing_profile_id,
            inst => [ map { $_->id } $_->instrument_data ],
            auto_assign_inst_data => $_->auto_assign_inst_data,
        }
    } @_;
}

