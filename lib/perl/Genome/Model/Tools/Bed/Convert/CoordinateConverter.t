#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
my $pkg = "Genome::Model::Tools::Bed::Convert::CoordinateConverter";
use_ok($pkg);
use Genome::Model::Tools::Bed::Convert::CoordinateConverter qw(convert_indel_gt_to_bed);

subtest 'Indel simplification - none' => sub {
    my $ref = 'G';
    my $var = undef;

    my ($result_ref, $result_var, $shift) = Genome::Model::Tools::Bed::Convert::CoordinateConverter::_simplify_indel_allele($ref, $var);
    is($result_ref, 'G', "ref allele as expected");
    is($result_var, '', "var allele as expected");
    is($shift, 0, "no position shift as expected");
};

subtest 'Indel simplification - simple insertion' => sub {
    my $ref = 'G';
    my $var = 'GT';

    my ($result_ref, $result_var, $shift) = Genome::Model::Tools::Bed::Convert::CoordinateConverter::_simplify_indel_allele($ref, $var);
    is($result_ref, q{}, "ref allele as expected");
    is($result_var, 'T', "var allele as expected");
    is($shift, 1, "position shift as expected");
};

subtest 'Indel simplification - simple deletion' => sub {
    my $ref = 'GT';
    my $var = 'G';

    my ($result_ref, $result_var, $shift) = Genome::Model::Tools::Bed::Convert::CoordinateConverter::_simplify_indel_allele($ref, $var);
    is($result_ref, 'T', "ref allele as expected");
    is($result_var, "", "var allele as expected");
    is($shift, 1, "position shift as expected");
};

subtest 'Indel simplification - ambiguous deletion' => sub {
    my $ref = 'GTTC';
    my $var = 'GTC';

    my ($result_ref, $result_var, $shift) = Genome::Model::Tools::Bed::Convert::CoordinateConverter::_simplify_indel_allele($ref, $var);
    is($result_ref, 'T', "ref allele as expected");
    is($result_var, "", "var allele as expected");
    is($shift, 1, "position shift as expected");
};

subtest 'Indel simplification - ambiguous insertion' => sub {
    my $ref = 'AGC';
    my $var = 'AGGGGGC';

    my ($result_ref, $result_var, $shift) = Genome::Model::Tools::Bed::Convert::CoordinateConverter::_simplify_indel_allele($ref, $var);
    is($result_ref, "", "ref allele as expected");
    is($result_var, "GGGG", "var allele as expected");
    is($shift, 1, "position shift as expected");
};

subtest 'Indel simplification - ambiguous deletion' => sub {
    my $ref = 'AGTGTC';
    my $var = 'AGTC';

    my ($result_ref, $result_var, $shift) = Genome::Model::Tools::Bed::Convert::CoordinateConverter::_simplify_indel_allele($ref, $var);
    is($result_ref, "GT", "ref allele as expected");
    is($result_var, "", "var allele as expected");
    is($shift, 1, "position shift as expected");
};

subtest 'Indel gt - simple insertion' => sub {
    my $ref = 'G';
    my @var = ('GT');

    my ($result, $shifts) = convert_indel_gt_to_bed($ref, @var);
    is_deeply($result, [['*', 'T']], "alleles as expected");
    is_deeply($shifts, [1], "no position shift as expected");
};

subtest 'Indel gt - simple deletion' => sub {
    my $ref = 'GT';
    my @var = ('G');

    my ($result, $shifts) = convert_indel_gt_to_bed($ref, @var);
    is_deeply($result, [['T', '*']], "alleles as expected");
    is_deeply($shifts, [1], "no position shift as expected");
};

subtest 'Indel gt - ambiguous deletion' => sub {
    my $ref = 'GTTTC';
    my @var = ('GTC');

    my ($result, $shifts) = convert_indel_gt_to_bed($ref, @var);
    is_deeply($result, [['TT', '*']], "alleles as expected");
    is_deeply($shifts, [1], "no position shift as expected");
};

subtest 'Indel gt - ambiguous insertion' => sub {
    my $ref = 'AGC';
    my @var = ('AGGGGGC');

    my ($result, $shifts) = convert_indel_gt_to_bed($ref, @var);
    is_deeply($result, [['*', 'GGGG']], "alleles as expected");
    is_deeply($shifts, [1], "no position shift as expected");
};

subtest 'Indel gt - ambiguous insertion' => sub {
    my $ref = 'AGTC';
    my @var = ('AGTGTC');

    # GT--C
    # GTGTC

    my ($result, $shifts) = convert_indel_gt_to_bed($ref, @var);
    is_deeply($result, [['*', 'GT']], "alleles as expected");
    is_deeply($shifts, [1], "position shift as expected");
};

subtest 'Indel gt - ambiguous deletion' => sub {
    my $ref = 'AGTGTC';
    my @var = ('AGTC');

    # GT--C
    # GTGTC

    my ($result, $shifts) = convert_indel_gt_to_bed($ref, @var);
    is_deeply($result, [['GT', '*']], "alleles as expected");
    is_deeply($shifts, [1], "no position shift as expected");
};


done_testing;

