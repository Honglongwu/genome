package Genome::Model::Tools::Music::CreateVisualizations::CreateMutationRelationPlots;

use warnings;
use strict;
use Genome;
use IO::File;

our $VERSION = $Genome::Model::Tools::Music::VERSION;

class Genome::Model::Tools::Music::CreateVisualizations::CreateMutationRelationPlots {
    is => 'Command::V2',
    has_input => [
        output_dir => {is => 'Text', doc => 'Output directory path'},
        input_matrix => {is => 'String', doc => 'A gene/sample matrix generated by the mutation-relation tool'},
        mutation_relation_file => {is => 'Text', doc => 'Results of mutation-relation tool'},
    ],
};

sub execute {
    my $self = shift;
    my $output_dir = $self->output_dir;
    my $output_file = join('/', $self->output_dir, 'mutation_relation_all_smgs.pdf');
    my $cmd = Genome::Model::Tools::Music::Plot::MutationRelation->create(
        input_matrix => $self->input_matrix,
        output_pdf => $output_file,
        skip_zero_mut_samples => '',);
    my $rv = eval{$cmd->execute()};
    if($@){
        my $error = $@;
        $self->error_message('Error running ' . $cmd->command_name . ': ' . $error);
        return;
    }
    $self->create_paired_mutation_relation_plots();
    return 1;
}

sub create_paired_mutation_relation_plots{
    my $self = shift;
    my $output_dir = $self->output_dir;
    my $mutation_relation_file = $self->mutation_relation_file;
    my $fh = IO::File->new($mutation_relation_file, 'r');
    my $header=1;
    for my $line (<$fh>){
        $header-- and next if $header;
        my ($first, $second) = split("\t", $line);
        $self->create_paired_mutation_relation_plot($first, $second);
    }
    return 1;
}

sub create_paired_mutation_relation_plot {
    my $self = shift;
    my ($first, $second) = @_;
    my $output_dir = $self->output_dir;
    my $output_file = join('/', $output_dir, "$first-$second.pdf");
    my $cmd = Genome::Model::Tools::Music::Plot::MutationRelation->create(
        input_matrix => $self->input_matrix,
        output_pdf => $output_file,
        genes_to_plot => join(',', $first, $second),
        skip_zero_mut_samples => '1'
    );
    my $rv = eval{$cmd->execute()};
    if($@){
        my $error = $@;
        $self->error_message('Error running ' . $cmd->command_name . ': ' . $error);
        return;
    }

    return 1;
}

1;
