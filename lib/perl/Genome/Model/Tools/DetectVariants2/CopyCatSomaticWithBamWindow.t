#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{NO_LSF} = 1;
}

use above 'Genome';
use Test::More tests => 16;
use File::Spec;
use Genome::Utility::Test;
use File::Compare;

my $class = 'Genome::Model::Tools::DetectVariants2::CopyCatSomaticWithBamWindow';
use_ok($class);

my $test_version = 2;
my $test_dir = File::Spec->join(Genome::Utility::Test->data_dir($class), "v$test_version");
ok(-e $test_dir, "Test directory $test_dir exists");

my $annotation_version = 0;
my $params = "[--bamwindow-version 0.4 --bamwindow-params {-w 10000 -r -l -s -q 1} --copycat-params {--per-read-length --per-library} --annotation-version $annotation_version ]";
my $refbuild_id = 106942997;
my $output_directory = Genome::Sys->create_temp_directory();

my $tumor_bam_file = File::Spec->join($test_dir, 'tumor.bam');
ok(-s $tumor_bam_file, "tumor bam exists");

my $normal_bam_file = File::Spec->join($test_dir, 'normal.bam');
ok(-s $normal_bam_file, "normal bam exists");

my $tumor_samtools_file = File::Spec->join($test_dir, 'tumor_samtools', 'snvs.hq');
ok(-s $tumor_samtools_file, 'tumor samtools file exists');

my $normal_samtools_file = File::Spec->join($test_dir, 'normal_samtools', 'snvs.hq');
ok(-s $normal_samtools_file, 'normal samtools file exists');

my $tumor_detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => File::Spec->join($test_dir, 'tumor_samtools'),
    detector_name => 'Genome::Model::Tools::DetectVariants2::Samtools',
    detector_params => '',
    detector_version => 'awesome',
    aligned_reads => $tumor_bam_file,
    reference_build_id => $refbuild_id,
);
$tumor_detector_result->lookup_hash($tumor_detector_result->calculate_lookup_hash());
ok($tumor_detector_result, 'tumor samtools results exists');

my $normal_detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => File::Spec->join($test_dir, 'normal_samtools'),
    detector_name => 'Genome::Model::Tools::DetectVariants2::Samtools',
    detector_params => '',
    detector_version => 'awesome',
    aligned_reads => $normal_bam_file,
    reference_build_id => $refbuild_id,
);
$normal_detector_result->lookup_hash($normal_detector_result->calculate_lookup_hash());
ok($normal_detector_result, 'normal samtools results exists');

my $version = _create_test_annotation_data($refbuild_id, File::Spec->join($test_dir, 'annotation_data'));

my $cmd = Genome::Model::Tools::DetectVariants2::CopyCatSomaticWithBamWindow->create(
    params => $params, 
    aligned_reads_input => $tumor_bam_file,
    control_aligned_reads_input => $normal_bam_file,
    reference_build_id => $refbuild_id,
    output_directory => $output_directory,
    bamwindow_filter_to_chromosomes => ['14'],
    annotation_version => $version,
);

ok($cmd, 'created CopyCatSomaticWithBamWindow object');

ok($cmd->execute, 'executed CopyCatSomaticWithBamWindow successfully');

my $expected_output_dir = File::Spec->join($test_dir, 'expected');
my @diffable_files = qw| libraries.tumor.txt
                         libraries.normal.txt |;

for my $file (@diffable_files){
    my $expected = File::Spec->join($expected_output_dir, $file);
    my $actual = File::Spec->join($output_directory, $file);
    is(compare($actual, $expected),0,"Actual file is the same as the expected file: $file");
}

my @non_diffable_files = qw| alts.paired.dat
                             segs.paired.dat |;

for my $file (@non_diffable_files){
    my $expected = File::Spec->join($expected_output_dir, $file);
    my $actual = File::Spec->join($output_directory, $file);
    my ($actual_wc) = split(" ", `wc -l $actual`);    
    my ($expected_wc) = split(" ", `wc -l $expected`);    
    ok(abs ($expected_wc - $actual_wc) <= 2, "$file line length is withing tolerance");
}

sub _create_test_annotation_data{
    my $reference_build_id = shift;
    my $annotation_dir = shift;
    my $reference_build = Genome::Model::Build->get($reference_build_id);
    my $cmd = Genome::Model::Tools::CopyCat::AddAnnotationData->create(
        version => $annotation_version,
        data_directory => $annotation_dir,
        reference_sequence => $reference_build,
    );
    ok($cmd, "Annotation data creation command exists");
    ok($cmd->execute, 'Successfully created annotation data set');
    return $version;
}

1;
