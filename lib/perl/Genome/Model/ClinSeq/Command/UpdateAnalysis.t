#!/usr/bin/env genome-perl

#Written by Malachi Griffith

use strict;
use warnings;
use File::Basename;
use Cwd 'abs_path';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{NO_LSF} = 1;
};

use above "Genome";
use Test::More tests=>31;
use Data::Dumper;
use Genome::Utility::Test qw(compare_ok);

use_ok('Genome::Model::ClinSeq::Command::UpdateAnalysis') or die;
use_ok('Genome::TestObjGenerator::ProcessingProfile::ReferenceAlignment');
use_ok('Genome::TestObjGenerator::ProcessingProfile::SomaticVariation');
use_ok('Genome::TestObjGenerator::ProcessingProfile::RnaSeq');
use_ok('Genome::TestObjGenerator::ProcessingProfile::ClinSeq');
use_ok('Genome::TestObjGenerator::ProcessingProfile::DifferentialExpression');
use_ok('Genome::TestObjGenerator::Model::ReferenceAlignment');
use_ok('Genome::TestObjGenerator::Model::SomaticVariation');
use_ok('Genome::TestObjGenerator::Model::RnaSeq');
use_ok('Genome::TestObjGenerator::Model::ClinSeq');
use_ok('Genome::TestObjGenerator::Model::ReferenceSequence');
use_ok('Genome::TestObjGenerator::Model::ImportedVariationList');
use_ok('Genome::TestObjGenerator::Model::ImportedAnnotation');
use_ok('Genome::TestObjGenerator::Build');

#Define the test where expected results are stored
my $expected_output_dir = $ENV{"GENOME_TEST_INPUTS"} . "/Genome-Model-ClinSeq-Command-UpdateAnalysis/2013-07-24/";
ok(-e $expected_output_dir, "Found test dir: $expected_output_dir") or die;

#Create a temp dir for results
my $temp_dir = Genome::Sys->create_temp_directory();
ok($temp_dir, "created temp directory: $temp_dir");

#genome model clin-seq update-analysis  --individual='common_name=HG1'  --samples='id in [2874747197,2874769474,2875643613]'

my $individual = Genome::Individual->create(common_name => "FAKE1", 
                                            name => "test-clin-seq",
                                            gender => "unspecified",
                                            upn => "-353",
                                           );
ok($individual, "Created an individual with id: ".$individual->id);
my @ids;
push @ids, [TEST_INDIVIDUAL_ID => $individual->id];

#Obtain a normal DNA sample
my $normal_dna_sample = Genome::Sample->create(source => $individual, 
                                               name => "clinseq-normal-dna",
                                               common_name => "normal",
                                               extraction_type => "genomic dna",
                                               cell_type => "primary",
                                               tissue_desc => "blood",
                                            );
my $normal_dna_sample_id = $normal_dna_sample->id;
push @ids, [NORMAL_DNA_SAMPLE => $normal_dna_sample_id];
ok($normal_dna_sample, "Created a normal sample with id ".$normal_dna_sample_id);
my $normal_inst_data = create_instrument_data_from_sample($normal_dna_sample);

#Obtain a tumor DNA sample
my $tumor_dna_sample = Genome::Sample->create(source => $individual, 
                                              name => "clinseq-tumor-dna",
                                              common_name => "met",
                                              extraction_type => "genomic dna",
                                              cell_type => "primary",
                                              tissue_desc => "brain",
                                            );
my $tumor_dna_sample_id = $tumor_dna_sample->id;
push @ids, [TUMOR_DNA_SAMPLE => $tumor_dna_sample_id];
ok($tumor_dna_sample, "Created a tumor sample with id ".$tumor_dna_sample_id);
my $tumor_inst_data = create_instrument_data_from_sample($tumor_dna_sample);

#Obtain a tumor RNA sample
my $tumor_rna_sample = Genome::Sample->create(source => $individual, 
                                              name => "clinseq_tumor_rna",
                                              common_name => "met",
                                              extraction_type => "rna",
                                              cell_type => "primary",
                                              tissue_desc => "brain",
                                            );
my $tumor_rna_sample_id = $tumor_rna_sample->id;
push @ids, [TUMOR_RNA_SAMPLE => $tumor_rna_sample_id];
ok($tumor_rna_sample, "Created a tumor rna sample with id $tumor_rna_sample_id");
my $rna_inst_data = create_instrument_data_from_sample($tumor_rna_sample);

#Create the update-analysis command for step 1
my $update_analysis_cmd1 = Genome::Model::ClinSeq::Command::UpdateAnalysis->create(display_defaults=>1);
$update_analysis_cmd1->queue_status_messages(1);
my $r1 = $update_analysis_cmd1->execute();
is($r1, 1, 'Testing for successful execution of step 1.  Expecting 1.  Got: '.$r1);

#Create the update-analysis command for step 2
my $dbsnp_model = Genome::TestObjGenerator::Model::ImportedVariationList->setup_object;
my $dbsnp_build = Genome::TestObjGenerator::Build->setup_object(model_id => $dbsnp_model->id);
push @ids, [DBSNP_BUILD => $dbsnp_build->id];

my $annotation_model = Genome::TestObjGenerator::Model::ImportedAnnotation->setup_object;
my $annotation_build = Genome::TestObjGenerator::Build->setup_object(model_id => $annotation_model->id);
push @ids, [ANNOTATION_BUILD => $annotation_build->id];

my $ref_seq_model = Genome::TestObjGenerator::Model::ReferenceSequence->setup_object;
my $ref_seq_build = Genome::TestObjGenerator::Build->setup_object(model_id => $ref_seq_model->id);
push @ids, [REFSEQ_BUILD => $ref_seq_build->id];

#setup refalign build
my $ref_align_pp = Genome::TestObjGenerator::ProcessingProfile::ReferenceAlignment->setup_object();
push @ids, [REFALIGN_PP => $ref_align_pp->id];
my $normal_model = Genome::TestObjGenerator::Model::ReferenceAlignment->setup_object(
    reference_sequence_build => $ref_seq_build,
    dbsnp_build => $dbsnp_build,
    annotation_reference_build => $annotation_build,
    processing_profile_id => $ref_align_pp->id,
    subject_name => $normal_dna_sample->name,
);
$normal_model->add_instrument_data($normal_inst_data);
push @ids, [NORMAL_REFALIGN_MODEL => $normal_model->id];
my $normal_build = Genome::TestObjGenerator::Build->setup_object(model_id => $normal_model->id, status => "Succeeded");
my $tumor_model = Genome::TestObjGenerator::Model::ReferenceAlignment->setup_object(
    reference_sequence_build => $ref_seq_build,
    dbsnp_build => $dbsnp_build,
    annotation_reference_build => $annotation_build,
    processing_profile_id => $ref_align_pp->id,
    subject_name => $tumor_dna_sample->name,
);
$tumor_model->add_instrument_data($tumor_inst_data);
push @ids, [TUMOR_REFALIGN_MODEL =>  $tumor_model->id];
my $tumor_build = Genome::TestObjGenerator::Build->setup_object(model_id => $tumor_model->id, status => 'Succeeded');
my $wgs_pp = Genome::TestObjGenerator::ProcessingProfile::SomaticVariation->setup_object();
push @ids, [WGS_PP => $wgs_pp->id];
my $wgs_model = Genome::TestObjGenerator::Model::SomaticVariation->setup_object(
    subject_name => $tumor_model->subject->name, 
    subject_type => "sample_group",
    normal_model => $normal_model, 
    tumor_model => $tumor_model, 
    processing_profile_id => $wgs_pp->id,
    annotation_build => $annotation_build,
    previously_discovered_variations_build => $dbsnp_build,
);
push @ids, [WGS_MODEL => $wgs_model->id];
my $wgs_build = Genome::TestObjGenerator::Build->setup_object(model_id => $wgs_model->id, status => 'Succeeded');

my $exome_pp = Genome::TestObjGenerator::ProcessingProfile::SomaticVariation->setup_object(
    snv_detection_strategy => "strelka 0.4.6.2 [isSkipDepthFilters = 0]");
push @ids, [EXOME_PP => $exome_pp->id];
my $rna_seq_pp = Genome::TestObjGenerator::ProcessingProfile::RnaSeq->setup_object();
push @ids, [RNASEQ_PP => $rna_seq_pp->id];
my $rna_seq_model = Genome::TestObjGenerator::Model::RnaSeq->setup_object(
    subject_name => $tumor_rna_sample->name,
    processing_profile_id => $rna_seq_pp->id,
    annotation_build => $annotation_build,
    reference_sequence_build => $ref_seq_build,
);
push @ids, [TUMOR_RNASEQ_MODEL => $rna_seq_model->id];
$rna_seq_model->add_instrument_data($rna_inst_data);
my $rna_seq_build = Genome::TestObjGenerator::Build->setup_object(model_id => $rna_seq_model->id, status => 'Succeeded');

my $diff_ex_pp = Genome::TestObjGenerator::ProcessingProfile::DifferentialExpression->setup_object;
push @ids, [DIFFEXP_PP => $diff_ex_pp->id];
my $clin_seq_pp = Genome::TestObjGenerator::ProcessingProfile::ClinSeq->setup_object;
push @ids, [CLINSEQ_PP => $clin_seq_pp->id];
my $clin_seq_model = Genome::TestObjGenerator::Model::ClinSeq->setup_object(
    processing_profile_id => $clin_seq_pp->id,
    wgs_model => $wgs_model,
    tumor_rnaseq_model => $rna_seq_model,
);
push @ids, [CLINSEQ_MODEL => $clin_seq_model->id];
my $clin_seq_build = Genome::TestObjGenerator::Build->setup_object(model_id => $clin_seq_model->id, status => "Succeeded");

my $update_analysis_cmd2 = Genome::Model::ClinSeq::Command::UpdateAnalysis->create(individual=>$individual,
                                                                ref_align_pp => $ref_align_pp,
                                                                wgs_somatic_variation_pp => $wgs_pp,
                                                                exome_somatic_variation_pp => $exome_pp,
                                                                rnaseq_pp => $rna_seq_pp,
                                                                differential_expression_pp => $diff_ex_pp,
                                                                clinseq_pp => $clin_seq_pp,
                                                                annotation_build => $annotation_build,
                                                                dbsnp_build => $dbsnp_build,
                                                                previously_discovered_variations => $dbsnp_build,
                                                                reference_sequence_build => $ref_seq_build,
                                                                        );
$update_analysis_cmd2->queue_status_messages(1);
my $r2 = $update_analysis_cmd2->execute();
is($r2, 1, 'Testing for successful execution of step 2.  Expecting 1.  Got: '.$r2);

#Create the update-analysis command for step 3
my $update_analysis_cmd3 = Genome::Model::ClinSeq::Command::UpdateAnalysis->create(individual=>$individual,
                                        samples=>[$normal_dna_sample,$tumor_dna_sample,$tumor_rna_sample],
                                                                ref_align_pp => $ref_align_pp,
                                                                wgs_somatic_variation_pp => $wgs_pp,
                                                                exome_somatic_variation_pp => $exome_pp,
                                                                rnaseq_pp => $rna_seq_pp,
                                                                differential_expression_pp => $diff_ex_pp,
                                                                clinseq_pp => $clin_seq_pp,
                                                                annotation_build => $annotation_build,
                                                                dbsnp_build => $dbsnp_build,
                                                                previously_discovered_variations => $dbsnp_build,
                                                                reference_sequence_build => $ref_seq_build,
                                                    );
$update_analysis_cmd3->queue_status_messages(1);
my $r3 = $update_analysis_cmd3->execute();
is($r3, 1, 'Testing for successful execution of step 3.  Expecting 1.  Got: '.$r3);

#Dump the output of update-analysis to a log file
my @output1 = $update_analysis_cmd1->status_messages();
my @output2 = $update_analysis_cmd2->status_messages();
my @output3 = $update_analysis_cmd3->status_messages();
my $output_file_name = "UpdateAnalysis.log.txt";
my $log_file = "$temp_dir/$output_file_name";

my $log = IO::File->new(">$log_file");
$log->print(join("\n", @output1));
$log->print(join("\n", @output2));
$log->print(join("\n", @output3));
$log->close;
ok(-e $log_file, "Wrote message file from update-analysis to a log file: $log_file");

#The first time we run this we will need to save our initial result to diff against
#Genome::Sys->shellcmd(cmd => "cp -r -L $temp_dir/* $expected_output_dir");
#Perform a diff between the stored results and those generated by this test
compare_ok($log_file, "$expected_output_dir/$output_file_name", replace => \@ids, name => "log files are the same");

sub create_instrument_data_from_sample {
    my $sample = shift;
    my $lib = Genome::Library->create(sample => $sample,
                                     );
    ok($lib, "Created library from sample ".$sample->id);
    my $inst_data = Genome::InstrumentData::Solexa->create(library => $lib);
    ok($inst_data, "Created instrument data from sample ".$sample->id);
    return $inst_data;
}
