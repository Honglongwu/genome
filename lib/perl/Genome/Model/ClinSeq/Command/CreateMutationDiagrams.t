#!/usr/bin/env genome-perl

#Written by Malachi Griffith

use strict;
use warnings;
use File::Basename;
use Cwd 'abs_path';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{NO_LSF} = 1;
};

use above "Genome";
use Test::More tests=>7; #One per 'ok', 'is', etc. statement below
use Genome::Model::ClinSeq::Command::CreateMutationDiagrams;
use Data::Dumper;
use Genome::TestObjGenerator::Model::ReferenceAlignment;
use Genome::TestObjGenerator::Model::ImportedAnnotation;
use Genome::TestObjGenerator::Model::SomaticVariation;
use Genome::TestObjGenerator::Build;

use_ok('Genome::Model::ClinSeq::Command::CreateMutationDiagrams') or die;

#Define the test where expected results are stored
my $base_dir = $ENV{"GENOME_TEST_INPUTS"} . "/Genome-Model-ClinSeq-Command-CreateMutationDiagrams/2013-07-17/";
my $expected_output_dir = $base_dir."expected";
ok(-e $expected_output_dir, "Found test dir: $expected_output_dir") or die;

#Create a temp dir for results
my $temp_dir = Genome::Sys->create_temp_directory();
ok($temp_dir, "created temp directory: $temp_dir");

#Get a somatic variation build
my $annotation_model = Genome::TestObjGenerator::Model::ImportedAnnotation->setup_object(name => "test_annotation_build");
my $annotation_build = Genome::TestObjGenerator::Build->setup_object(model_id => $annotation_model->id,
                                                                     data_directory => "$base_dir/annot_dir",
                                                                     status => "Succeeded",
                                                                     version => 1,
                                                                    );
my $normal_model = Genome::TestObjGenerator::Model::ReferenceAlignment->setup_object(annotation_reference_build => $annotation_build);
my $tumor_model = Genome::TestObjGenerator::Model::ReferenceAlignment->setup_object(processing_profile_id => $normal_model->processing_profile->id, annotation_reference_build => $annotation_build);
my $somvar_model = Genome::TestObjGenerator::Model::SomaticVariation->setup_object(
                                                                     normal_model => $normal_model,
                                                                     tumor_model => $tumor_model,
                                                                     annotation_build => $annotation_build,
                                                                    );
my $somvar_build = Genome::TestObjGenerator::Build->setup_object(model_id => $somvar_model->id,
                                                                 data_directory => "$base_dir/som_var_dir",
                                                                 status => "Succeeded");
ok ($somvar_build, "Got somatic variation build") or die;
$ENV{GENOME_DB} = "$base_dir/reference_annotations/";
my $cancer_annotation_db = Genome::Db->get("tgi/cancer-annotation/human/build37-20130401.1");
my $cosmic_annotation_db = Genome::Db->get("cosmic/65.1");

#Create create-mutation-diagrams command and execute
#genome model clin-seq create-mutation-diagrams --outdir=/tmp/create_mutation_diagrams/ --collapse-variants --max-transcripts=10 129973671
my $mutation_diagram_cmd = Genome::Model::ClinSeq::Command::CreateMutationDiagrams->create(
    outdir=>$temp_dir, 
    collapse_variants=>1, 
    max_transcripts=>10, 
    builds=>[$somvar_build], 
    cancer_annotation_db => $cancer_annotation_db,
    cosmic_annotation_db => $cosmic_annotation_db,
);
$mutation_diagram_cmd->queue_status_messages(1);
my $r1 = $mutation_diagram_cmd->execute();
is($r1, 1, 'Testing for successful execution.  Expecting 1.  Got: '.$r1);

#Dump the output of update-analysis to a log file
my @output1 = $mutation_diagram_cmd->status_messages();
my $log_file = $temp_dir . "/CreateMutationDiagrams.log.txt";
my $log = IO::File->new(">$log_file");
$log->print(join("\n", @output1));
ok(-e $log_file, "Wrote message file from update-analysis to a log file: $log_file");

#The first time we run this we will need to save our initial result to diff against
#Genome::Sys->shellcmd(cmd => "cp -r -L $temp_dir/* $expected_output_dir");

#Perform a diff between the stored results and those generated by this test
my @diff = `diff -r -x '*.stderr' -x '*.stdout' -x '*.log.txt' -I 'circle' -I 'path' $expected_output_dir $temp_dir`;
ok(@diff == 0, "Found only expected number of differences between expected results and test results")
or do { 
  diag("expected: $expected_output_dir\nactual: $temp_dir\n");
  diag("differences are:");
  diag(@diff);
  my $diff_line_count = scalar(@diff);
  print "\n\nFound $diff_line_count differing lines\n\n";
  Genome::Sys->shellcmd(cmd => "rm -fr /tmp/last-create-mutation-diagrams-result/");
  Genome::Sys->shellcmd(cmd => "mv $temp_dir /tmp/last-create-mutation-diagrams-result");
};




