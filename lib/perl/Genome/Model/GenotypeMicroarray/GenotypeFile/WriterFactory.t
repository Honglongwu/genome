#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
};

use above 'Genome';

use Test::More;

use_ok('Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory') or die;

my $tmpdir = File::Temp::tempdir(CLEANUP => 1);
my $cnt = 0;
my $output_file_generator = sub{ $tmpdir.'/FILE'.++$cnt; };

## TEST ERRORS ##
# Invalid format
ok(!Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory->build_writer('format=supervcf'), 'failed to create writer w/ invalid format');

# Dup key
ok(!Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory->build_writer('format=vcf:format=vcf'), 'failed to create writer w/ dup key');

### VCF ###
# Default is VCF to STDOUT
my $writer = Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory->build_writer();
isa_ok($writer, 'Genome::File::Vcf::Writer');
is($writer->{name}, '-', 'output is STDOUT');

# Output w/o key is specified
my $output_file = $output_file_generator->();
$writer = Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory->build_writer($output_file);
isa_ok($writer, 'Genome::File::Vcf::Writer');
is($writer->{name}, $output_file, "original output is $output_file");

# Output and format specified
$output_file = $output_file_generator->();
$writer = Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory->build_writer('output='.$output_file.':format=vcf');
isa_ok($writer, 'Genome::File::Vcf::Writer');
is($writer->{name}, $output_file, "original output is $output_file");

## CSV ###
# Defaults
$output_file = $output_file_generator->();
$writer = Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory->build_writer($output_file.':format=csv:separator=TAB');
isa_ok($writer, 'Genome::Utility::IO::SeparatedValueWriter');
is($writer->get_original_output, $output_file, "original output is $output_file");
is($writer->separator, "\t", 'separator is TAB');
is_deeply($writer->headers, [qw/ chromosome position alleles reference id sample_id log_r_ratio gc_score cnv_value cnv_confidence allele1 allele2 /], 'headers are correct');
ok($writer->print_headers, 'print_headers is true');

# Everything specified
$output_file = $output_file_generator->();
$writer = Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory->build_writer('output='.$output_file.':format=csv:separator=,:fields=chromosome,allele1:headers=0:in_place_of_null_value=NULL');
isa_ok($writer, 'Genome::Utility::IO::SeparatedValueWriter');
is($writer->get_original_output, $output_file, "original output is $output_file");
is($writer->separator, ',', 'separator is comma');
is_deeply($writer->headers, [qw/ chromosome allele1 /], 'headers are correct');
ok(!$writer->print_headers, 'print_headers is false');

done_testing();
