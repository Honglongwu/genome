#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
};

use above 'Genome';

use Data::Dumper;
require File::Temp;
require File::Compare;
use Test::More;

use_ok('Genome::Model::GenotypeMicroarray::GenotypeFile::ReaderFactory') or die;
use_ok('Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory') or die;
use_ok('Genome::Model::GenotypeMicroarray::Test') or die;

my $testdir = Genome::Model::GenotypeMicroarray::Test::testdir();
my $tmpdir = File::Temp::tempdir(CLEANUP => 1);
my %snp_id_mapping;

###
# TSV [inst data] to TSV [old build]
my $reader = Genome::Model::GenotypeMicroarray::GenotypeFile::ReaderFactory->build_reader(
    Genome::Model::GenotypeMicroarray::Test::instrument_data(),
    Genome::Model::GenotypeMicroarray::Test::variation_list_build(),
);
ok($reader, 'build reader');
my $output_tsv = $tmpdir.'/genotypes.tsv';
my $writer = Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory->build_writer($output_tsv);
ok($writer, 'create writer');

my @genotypes_from_instdata;
while ( my $genotype = $reader->read ) {
    $writer->write($genotype);
    push @genotypes_from_instdata, $genotype;
}
$writer->output->flush;
is_deeply(\@genotypes_from_instdata, Genome::Model::GenotypeMicroarray::Test::expected_genotypes(), 'read tsv and annotate genotypes match');
is(File::Compare::compare($output_tsv, $testdir.'/rw/output.expected.tsv'), 0, 'read tsv and annotate, write to tsv output file matches');
print "gvimdiff $output_tsv $testdir/rw/output.expected.tsv\n"; <STDIN>;

###
# TSV [old build] to VCF
$reader = Genome::Model::GenotypeMicroarray::GenotypeFile::ReaderFactory->build_reader(
    Genome::Model::GenotypeMicroarray::Test::example_legacy_build(),
);
ok($reader, 'create reader');
my $output_vcf = $tmpdir.'/genotypes.vcf';
$writer = Genome::Model::GenotypeMicroarray::GenotypeFile::WriterFactory->build_writer($output_vcf);
ok($writer, 'create writer');

my @genotypes_from_legacy_build;
while ( my $genotype = $reader->read ) {
    $writer->write($genotype);
    push @genotypes_from_legacy_build, $genotype;
}
$writer->close;
is_deeply(\@genotypes_from_legacy_build, \@genotypes_from_instdata, 'genotypes match');
is(File::Compare::compare($output_vcf, $testdir.'/rw/output.expected.vcf'), 0, 'read tsv, write to vcf output file matches');
#print "gvimdiff $output_vcf $testdir/rw/output.expected.vcf\n"; <STDIN>;

done_testing();

###

sub _init {

    my $base_testdir = $ENV{GENOME_TEST_INPUTS} . '/GenotypeMicroarray/';
    my $fl = Genome::Model::Tools::DetectVariants2::Result::Manual->__define__(
        description => '__TEST__DBSNP132__',
        username => 'apipe-tester',
        file_content_hash => 'c746fb7b7a88712d27cf71f8262dd6e8',
        output_dir => $testdir.'/dbsnp',
    );
    $fl->lookup_hash($fl->calculate_lookup_hash());
    ok($fl, 'create dv2 result');
    my $refseq_build = Genome::Model::Build::ReferenceSequence->__define__();
    my $variation_list_build = Genome::Model::Build::ImportedVariationList->__define__(
        model => Genome::Model->get(2868377411),
        snv_result => $fl,
        version => 132,
        reference_id => $refseq_build->id,
    );
    ok($variation_list_build, 'create variation list build');

    my $alloc_for_snpid_mapping = Genome::Disk::Allocation->__define__(
        disk_group_name => $ENV{GENOME_DISK_GROUP_ALIGNMENTS},
        group_subdirectory => '',
        mount_path => $testdir.'/dbsnp',
        allocation_path => 'microarray_data/infinium-test-1',
    );
    ok($alloc_for_snpid_mapping, 'define snpid mapping allocation');

    my %sequence_at = (
        752566 => 'A',
        752721 => 'A',
        798959 => 'T',
        800007 => 'A',
        838555 => 'C',
        846808 => 'G',
        854250 => 'A',
        873558 => 'C',
        882033 => 'G',
    );
    no warnings;
    *Genome::FeatureList::file_path = sub{ return $testdir.'/dbsnp/snvs.hq.bed'; };
    *Genome::Model::Build::ReferenceSequence::sequence = sub{ $sequence_at{$_[2]}; };
    use warnings;

    return $variation_list_build
}

