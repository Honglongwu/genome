#!/usr/bin/perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;
use above "Genome";
use Test::More;
use Test::Exception;

my $pkg = 'Genome::Model::Detail::RunsVariantReporting';
use_ok($pkg) or die;

{
    package Genome::Model::TestRunsVariantReporting;
    use strict;
    use warnings FATAL => 'all';
    use Genome;

    my $SEARCHDIR = __FILE__ . ".d";

    class Genome::Model::TestRunsVariantReporting {
        is => 'Genome::Model::Detail::RunsVariantReporting',
    };

    sub _variant_reporting_plan_search_dir {
        return $SEARCHDIR;
    }
    1;
}

# Test a working processing profile
my $working_pp = Genome::ProcessingProfile::TestRunsVariantReporting->create(
    name => 'working test pp',
    snvs_variant_reporting_plan_name => 'working',
);
ok($working_pp, 'created a working processing profile with a valid plan');
is($working_pp->__errors__, 0, 'no profile errors found');

# Test a processing profile with a bad plan name
my $bad_plan_name_pp = Genome::ProcessingProfile::TestRunsVariantReporting->create(
    name => 'bad plan name pp',
    snvs_variant_reporting_plan_name => 'not_an_existing_plan'
);
ok($bad_plan_name_pp, 'Processing profile created with a nonexistant plan');
ok(check_errors(qr(Could not find annotation plan), $bad_plan_name_pp->__errors__), 'Found the errors we expected');

# Test a processing profile with a bad plan
my $bad_plan_pp = Genome::ProcessingProfile::TestRunsVariantReporting->create(
    name => 'bad plan pp',
    snvs_variant_reporting_plan_name => 'invalid_plan'
);
ok($bad_plan_pp, 'Processing profile created with an invalid plan');
my @errors = $bad_plan_pp->__errors__;
ok(scalar(@errors) > 0, 'profile errors found');
ok(check_errors(qr(No reporters with name), @errors), 'Found the errors we expected');

done_testing();

sub check_errors{
    my ($regex, @errors) = @_;

    for my $error (@errors) {
        if ($error->desc =~ m/$regex/) {
            return 1;
        }
    }

    return 0;
}
