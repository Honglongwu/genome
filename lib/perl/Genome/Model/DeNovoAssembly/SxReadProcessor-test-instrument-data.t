#!/gsc/bin/perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;

use_ok("Genome::Model::DeNovoAssembly::SxReadProcessor");
use_ok("Genome::InstrumentData::InstrumentDataTestObjGenerator");

my $id = Genome::InstrumentData::InstrumentDataTestObjGenerator::create_solexa_instrument_data("fake.bam");
ok($id, "Instrument data created");

my $condition = "original_est_fragment_size > 0 and original_est_fragment_size <= 1000";
test_instrument_data_matches_condition(1, 100, $condition, 1, "Condition with 'and'");
test_instrument_data_matches_condition(1001, 100, $condition, 0, "Condition with 'and'");

my $calculated_condition = "original_est_fragment_size <= 2.5 * read_length";
test_instrument_data_matches_condition(200, 100, $calculated_condition, 1, "Calculated condition");
test_instrument_data_matches_condition(600, 100, $calculated_condition, 0, "Calculated condition");

done_testing;

sub test_instrument_data_matches_condition {
    my ($original_est_fragment_size, $read_length, $condition, $expected_outcome, $message) = @_;
    if ($expected_outcome) {
        $message .= " passes correctly";
    }
    else {
        $message .= " fails correctly";
    }
    $id->original_est_fragment_size($original_est_fragment_size);
    $id->read_length($read_length);
    my @words = split /\s+/, $condition;
    my $result = Genome::Model::DeNovoAssembly::SxReadProcessor->does_instrument_data_match_condition($id, @words);
    if ($expected_outcome) {
        ok($result, $message);
    }
    else {
        ok(!$result, $message);
    }
}
