#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
};

use strict;
use warnings;

use above 'Genome';

use Test::More;

use_ok('Genome::Model::DeNovoAssembly::Build::LinkSxResult') or die;
use_ok('Genome::Model::DeNovoAssembly::Build::Test') or die;

my $build = Genome::Model::DeNovoAssembly::Build::Test->build_for_assembler('soap de-novo-assemble');
ok($build, 'build for testing');

my $sx_result = Genome::InstrumentData::SxResult->__define__(
    instrument_data_id => $build->instrument_data->id,
    output_dir => $ENV{GENOME_TEST_INPUTS}.'/Genome-Model/DeNovoAssembly/Build-ProcessInstrumentData-v1/',
    output_file_type => 'sanger',
    output_file_count => 2,
);
ok($sx_result, 'define sx reuslt');

my $link = Genome::Model::DeNovoAssembly::Build::LinkSxResult->create(
    build => $build,
    sx_result => $sx_result,
);
ok($link, 'create link sx result');
ok($link->execute, 'execute succeeded');

for (1..2) {
    ok(-l $build->data_directory.'/-7777.'.$_.'.fastq', "linked fastq $_");
}

for (qw/ input output /) {
    ok(-l $build->data_directory.'/-7777.'.$_.'_metrics', "linked $_ metrics");
}

#print $build->data_directory."\n";<STDIN>;
done_testing();
