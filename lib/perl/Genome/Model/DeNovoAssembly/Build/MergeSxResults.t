#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
};

use strict;
use warnings;

use above 'Genome';

use Genome::Utility::Test 'compare_ok';
use Test::More;

use_ok('Genome::Model::DeNovoAssembly::Build::MergeSxResults') or die;
use_ok('Genome::Model::DeNovoAssembly::Build::Test') or die;

my $build = Genome::Model::DeNovoAssembly::Build::Test->build_for_assembler('soap de-novo-assemble');
ok($build, 'build for testing');
my $example_build = Genome::Model::DeNovoAssembly::Build::Test->build_for_assembler('soap de-novo-assemble');
ok($example_build, 'example build');

my $sx_result = Genome::InstrumentData::SxResult->__define__(
    instrument_data_id => $build->instrument_data->id,
    read_processor => 'trim bwa-style -trim-qual-level 10 | filter by-length -filter-length 35 | rename illumina-to-pcap',
    output_dir => $ENV{GENOME_TEST_INPUTS}.'/Genome-Model/DeNovoAssembly/Build-ProcessInstrumentData-v1/',
    output_file_type => 'sanger',
    output_file_count => 2,
);
$sx_result->lookup_hash( $sx_result->calculate_lookup_hash );
ok($sx_result, 'define sx result');

my $merge = Genome::Model::DeNovoAssembly::Build::MergeSxResults->create(
    build => $build,
    sx_results => [$sx_result],
);
ok($merge, 'create merge instrument data');

ok(!$merge->shortcut, 'failed to shortcut');
ok($merge->execute, 'execute succeeded');
ok($merge->merged_sx_result, 'set sx result during execute on merge inst data');
ok(!$merge->merged_sx_result(undef), 'undef sx result to check if shortcut sets it');
ok($merge->shortcut, 'shortcut succeeded');
ok($merge->merged_sx_result, 'set sx result during shortcut on merge inst data');

#print $merge->merged_sx_result->output_dir."\n";<STDIN>;
#for my $file_name ( $merge->read_processor_output_files ) {
#    compare_ok($merge->merged_sx_result->output_dir.'/'.$file_name, $ENV{GENOME_TEST_INPUTS}.'/Genome-Model/DeNovoAssembly/Build-MergeSxResults-v1/'.$file_name, "fastq $file_name matches");
#}

done_testing();
