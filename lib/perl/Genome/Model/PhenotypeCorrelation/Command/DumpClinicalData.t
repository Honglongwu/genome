#!/usr/bin/env genome-perl

use File::Slurp qw/read_file/;
use File::Temp qw/tempdir/;
use Test::More;
use above 'Genome';

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

my $tmpdir = tempdir(
    't-DumpClinicalData-XXXXX',
    TEMPDIR => 1,
    CLEANUP => 1
);

my $output_file = "$tmpdir/clin.tsv";
my $md5_file = "$tmpdir/clin.tsv.md5";
my $expected_file = __FILE__ . ".expected";
my $expected_md5sum = '124f9d890b69762e4a7402810b60566f';


my $pkg = 'Genome::Model::PhenotypeCorrelation::Command::DumpClinicalData';
use_ok($pkg);

my $nomenclature = Genome::Nomenclature->create(
    name => "TestNomenclature",
    empty_equivalent => "NA",
);
my @samples = setup_samples($nomenclature);

my $cmd = $pkg->create(
    samples => \@samples,
    output_file => $output_file,
    md5_file => $md5_file,
    nomenclature => $nomenclature,
    missing_string => '.',
    );

ok($cmd, 'Created command object');
ok($cmd->execute, 'Executed command');
my $diff = Genome::Sys->diff_file_vs_file($output_file, $expected_file);
ok(!$diff, 'output matched expected result')
    or diag("diff results:\n" . $diff);

is($cmd->_md5sum, $expected_md5sum, 'md5sum (directly from object) is as expected');
my $md5_from_file = read_file($md5_file);
chomp $md5_from_file;
is($md5_from_file, $expected_md5sum, 'md5sum from .md5 file is also as expected');

done_testing();
    
sub setup_samples {
    my $nomenclature = shift;

    my $taxon = Genome::Taxon->get(name => 'human');
    my @samples;

    # Create 10 samples, each with 1 unique attribute
    for my $i (1..10) {
        my $field = Genome::Nomenclature::Field->create(
            name => "attr$i",
            type => "string",
            nomenclature => $nomenclature,
        );

        my $individual = Genome::Individual->create(name => "test-patient$i", common_name => "testpat$i", taxon => $taxon);
        my $sample = Genome::Sample->create(name => "test-patient$i", common_name => "sample$i", source => $individual);
        my $attr = Genome::SubjectAttribute->create(
            subject_id => $individual->id,
            attribute_label => "attr$i",
            attribute_value => "value$i",
            nomenclature_field => $field,
            nomenclature => $nomenclature->name,
        );        

        push(@samples, $sample);
    }

    return @samples;
}
