#!/usr/bin/env genome-perl

use File::Slurp qw/read_file/;
use File::Temp qw/tempdir/;
use Test::More;
use Math::Random qw/random_normal/;
use above 'Genome';

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

my $tmpdir = tempdir(
    't-ClinicalDataSummary-XXXXX',
    TMPDIR => 1,
    CLEANUP => 1
);

### Begin Test Data Setup
my $nomenclature = Genome::Nomenclature->create(
    name => "TestNomenclature",
    empty_equivalent => "NA",
);

my $phenotype_field = Genome::Nomenclature::Field->create(
    name => "phenotype",
    type => "string",
    nomenclature => $nomenclature,
    enumerated_values => ["0", "1"],
);

my $gender_field = Genome::Nomenclature::Field->create(
    name => "Gender",
    type => "string",
    nomenclature => $nomenclature,
    enumerated_values => ["M", "F"],
);

my $race_field = Genome::Nomenclature::Field->create(
    name => "Race",
    type => "string",
    nomenclature => $nomenclature,
    enumerated_values => ["Race1", "Race2"],
);

my $quant_field = Genome::Nomenclature::Field->create(
    name => "C1",
    type => "float",
    nomenclature => $nomenclature,
);

my @genders = (("M")x42, ("F")x58);
my @races = (("Race1")x25, ("Race2")x25)x2;
my @quant_values = random_normal(100, 0, 1);
my @phenotypes = ("0","1")x50;

my $glm_config = Genome::Model::PhenotypeCorrelation::GlmConfig->from_string_arrayref([
    "B\tphenotype\tNA\tRace + Gender + C1\t\n"
]);

my $expected_text = <<EOS;
phenotype	0	1
------------------------------
Race
------------------------------
Race1	26	24
Race2	24	26
------------------------------
Gender
------------------------------
F	29	29
M	21	21
------------------------------
Total	50	50
EOS

my @expected_plots = (
    "boxplot-C1-phenotype_0.png",
    "boxplot-C1-phenotype_1.png",
    "histogram-C1-phenotype_0.png",
    "histogram-C1-phenotype_1.png",
);

### End Test Data Setup

my $pkg = 'Genome::Model::PhenotypeCorrelation::Command::ClinicalDataSummary';
use_ok($pkg);

my $output_dir = "$tmpdir/clinical_data_summary";
my $glm_model_file = "$tmpdir/glm-model.txt";
$glm_config->to_file($glm_model_file);

my @samples = setup_samples($nomenclature);

my $cmd = $pkg->create(
    samples => \@samples,
    glm_model_file => $glm_model_file,
    nomenclature => $nomenclature, 
    output_directory => $output_dir,
    );

ok($cmd, 'Created command object');
ok($cmd->execute, 'Executed command');

my $categorical_output = read_file("$output_dir/categorical.txt");
is($categorical_output, $expected_text, "Categorical output is as expected");
ok(-d "$output_dir/plots", "plots directory exists");
for my $plot (@expected_plots) {
    ok(-s "$output_dir/plots/$plot", "$plot exists");
}

done_testing();
    
sub setup_samples {
    my $nomenclature = shift;

    my $taxon = Genome::Taxon->get(name => 'human');
    my @samples;

    for my $i (0..$#genders) {
        my $individual = Genome::Individual->create(name => "test-patient$i", common_name => "testpat$i", taxon => $taxon);
        my $sample = Genome::Sample->create(name => "test-patient$i", common_name => "sample$i", source => $individual);
        my $phen_attr = Genome::SubjectAttribute->create(
            subject_id => $individual->id,
            attribute_label => $phenotype_field->name,
            attribute_value => $phenotypes[$i],
            nomenclature_field => $phenotype_field,
            nomenclature => $nomenclature->name,
        );        

        my $race_attr = Genome::SubjectAttribute->create(
            subject_id => $individual->id,
            attribute_label => $race_field->name,
            attribute_value => $races[$i],
            nomenclature_field => $race_field,
            nomenclature => $nomenclature->name,
        );        

        my $gender_attr = Genome::SubjectAttribute->create(
            subject_id => $individual->id,
            attribute_label => $gender_field->name,
            attribute_value => $genders[$i],
            nomenclature_field => $gender_field,
            nomenclature => $nomenclature->name,
        );        

        my $quant_attr = Genome::SubjectAttribute->create(
            subject_id => $individual->id,
            attribute_label => $quant_field->name,
            attribute_value => $quant_values[$i],
            nomenclature_field => $gender_field,
            nomenclature => $nomenclature->name,
        );        

        push(@samples, $sample);
    }

    return @samples;
}
