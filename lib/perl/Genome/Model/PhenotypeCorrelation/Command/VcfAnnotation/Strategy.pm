package Genome::Model::PhenotypeCorrelation::Command::VcfAnnotation::Strategy;

use Genome;
use Parse::RecDescent;
use Carp qw/confess/;

use strict;
use warnings;

my $grammar = q{
    startrule: strategy end
        { $item[1]; }
    | <error>

    end: /^\Z/

    params_hash: '{' kv_list '}'
        {
            $return = $item[2];
        }

    params_hash_list: params_hash ',' params_hash_list
            { $return = [$item[1], @{$item[3]}]; }
        | params_hash
            { $return = [$item[1]]; }

    vep_strategy: "vep" params_hash
        { $return = { type => $item[1], params => $item[2] }; }

    joinx_strategy: "joinx" '[' params_hash_list ']'
            { $return = { type => $item[1], params => $item[3] }; }
        | "joinx" params_hash
            { $return = { type => $item[1], params => [$item[2]] }; }

    strategy: any_strategy '|' strategy
            { $return = [$item[1], @{$item[3]}]; }
        | any_strategy
            { $return = [$item[1]] }

    any_strategy: vep_strategy | joinx_strategy
        | <error>

    identifier: /^[a-zA-Z_][a-zA-Z0-9_]*/ { $return = $item[1]; }

    value: <perl_quotelike> { $return = $item[1]->[2]; }
        | word { $return = $item[1]; }

    kv_pair: identifier ':' value
        { $return = {$item[1] => $item[3]}; }

    kv_list: kv_pair ',' kv_list
        { $return = { %{$item[1]}, %{$item[3]} } }
        | kv_pair

    word: /([\w\.:-]|\\\\)+/ { $return = $item[1]; }

    info_spec: "info" /([^\s<>])+/ { $return = $item[2]; }
};

class Genome::Model::PhenotypeCorrelation::Command::VcfAnnotation::Strategy {
    is => "Command::V2",
    has_input => [
        strategy => {
            is => "Text",
            doc => "The strategy defining the sequence of vcf annotations to perform",
        },
    ],
    has_optional_output => [
        tree => {
            is => 'HASH',
            doc => 'The parse tree generated by the strategy',
        },
    ],
};

my $parser;

sub execute {
    my $self = shift;
    $parser = Parse::RecDescent->new($grammar) unless $parser;

    my $strategy = $self->strategy;
    $self->tree($parser->startrule($strategy));
    confess "Failed to parse vcf annotation strategy $strategy" unless $self->tree;
    return $self->tree;
}

1;
