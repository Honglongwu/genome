#!/usr/bin/env genome-perl

use POSIX;
use Data::Dumper;
use Sort::Naturally qw/nsort/;
use IO::File;
use File::Temp qw/tempdir/;
use File::Slurp qw/read_file/;
use Test::More;
use above 'Genome';

use warnings;
use strict;
BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{NO_LSF} = 1;
}

#if(not $ENV{UR_RUN_LONG_TESTS}) {
    #plan skip_all => 'This test takes a long time to run. Use `ur test run --long` or set the UR_RUN_LONG_TESTS env var to enable.';
#}

my $pkg = 'Genome::Model::PhenotypeCorrelation::Command::CaseControl::Unrelated';
use_ok($pkg);

my $test_data_dir = $ENV{GENOME_TEST_INPUTS} . "/Genome-Model-PhenotypeCorrelation-testdata";

my $tmpdir = tempdir(
    't-ParallelClinicalCorrelation-XXXXX',
    DIR => "$ENV{GENOME_TEST_TEMP}",
    CLEANUP => 1
);

# TEST!
my $input_vcf_file = "$test_data_dir/multisample.vcf";
my $glm_model_file = "$test_data_dir/glm-model.txt";
my $clinical_data_file = "$test_data_dir/clinical.txt";
my $sample_list_file = "$test_data_dir/samples.txt";
my $output_file = "$tmpdir/parallel.txt.glm.csv";
my $orig_output_file_prefix = "$tmpdir/orig.txt";
my $orig_output_file = "$orig_output_file_prefix.glm.csv";

print "Using temp directory: $tmpdir\n";

# FIXME: This module currently tries to write things next to the multisample vcf
# which would be in the test data directory. For now, we'll just make a symlink
# to the vcf in the output directory.
my $vcf_file = "$tmpdir/multisample.vcf";
symlink($input_vcf_file, $vcf_file);

my $cmd = $pkg->create(
        multisample_vcf => $vcf_file,
        output_directory => $tmpdir,
        sample_list_file => $sample_list_file,
        clinical_data_file => $clinical_data_file,
        glm_model_file => $glm_model_file,
        glm_max_cols_per_file => 5,
    );
ok($cmd, "Created command object");
ok($cmd->execute, "Executed command");

ok(-d "$tmpdir/burden_analysis", "Burden analysis subdirectory exists");

my @expected_files = (
    "clinical_correlation_result.glm.csv",
    "clinical_correlation_result.glm.csv.qqplot.png",
    "clinical_correlation_result.categorical.csv",
    "clinical_correlation_result.categorical.csv.qqplot.png",
    "multisample.vcf.VEP_annotated",
    "multisample.vcf.VEP_annotated.sorted",
    "multisample.vcf.VEP_annotated.for_burden",
    "variant_matrix.txt",
    "burden_matrix.txt",
);

for my $f (@expected_files) {
    ok(-s "$tmpdir/$f", "Expected file $f exists and is not empty");
}

done_testing();
