use warnings;
use strict;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above 'Genome';
use Test::More;

my $cls = "Genome::Model::DifferentialExpression::Command::GMTCuffdiffWrapper";
use_ok($cls, "can use");

# stub out the function for testing to just touch a file.
my $_exe_fn = $cls . "::_execute_gmt_cuffdiff";
no strict "refs";
*$_exe_fn = sub {
    my $self = shift;
    my $output_directory = shift;

    my $new_file = "$output_directory/" . $self->transcript_gtf_file;
    diag "Touching $new_file\n";
    `touch $new_file`;
    return 1;
};
use strict;

my $temp_dir = Genome::Sys->create_temp_directory();
diag "Created Temporary Directory at: $temp_dir\n";

my $cmd = $cls->execute(
    transcript_gtf_file => 'some_file',
    condition_model_ids_string => 'some_string',
    output_directory => $temp_dir,
    cuffdiff_params => 'some_params',
);
diag Data::Dumper::Dumper($cmd);

is($cmd->software_result->class, $cls . "::Result", "Result is of proper auto-generated class");

my $software_result = $cmd->software_result;
diag "SoftwareResult output_dir: " . $software_result->output_dir . "\n";
my $some_file = $cmd->software_result->output_dir . "/some_file";
ok(-e $some_file, 'SoftwareResult has data produced from command execution');


my $another_temp_dir = Genome::Sys->create_temp_directory();
my $same_cmd = $cls->execute(
    transcript_gtf_file => 'some_file',
    condition_model_ids_string => 'some_string',
    output_directory => $another_temp_dir,
    cuffdiff_params => 'some_params',
);
is($same_cmd->software_result->id, $cmd->software_result->id, "Same software_result for same inputs");

my $different_cmd = $cls->execute(
    transcript_gtf_file => 'some_different_file',
    condition_model_ids_string => 'some_string',
    output_directory => $another_temp_dir,
    cuffdiff_params => 'some_params',
);
isnt($different_cmd->software_result->id, $cmd->software_result->id, "Different software_result for different inputs");


my $_get_bam_file = $cls . "::_get_bam_file";
no strict "refs";
*$_get_bam_file = sub {
    my $model_id = shift;

    return $model_id;
};
use strict;

my $result = Genome::Model::DifferentialExpression::Command::GMTCuffdiffWrapper::_resolve_bam_file_paths(
    'a,b,c d,e f g,h i'
);
my $expected_result = 'a,b,c d,e f g,h i ';
is($result, $expected_result, 'Found expected result from _resolve_bam_file_paths');


done_testing();

1;
