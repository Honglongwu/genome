#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Genome::Test::Factory::InstrumentData::MergedAlignmentResult;
use Genome::Test::Factory::Model::SomaticValidation;
use Genome::Test::Factory::Build;
use Genome::Test::Factory::Sample;

my $package = "Genome::Model::SomaticValidation::Command::WithMode";

use_ok($package);

{
    package Test;

    class Test {
        is => $package,
    };

    sub execute {
        return 1;
    }

    package TestResult;
    class TestResult {
        is => "Genome::SoftwareResult",
        has_metric => [
            metric1 => {
            },
        ],
    };
}

my ($tumor_sample, $normal_sample, $build1, $build2, $result) = setup_objects();

my $cmd1t = Test->create(build_id => $build1->id, mode => "tumor");
ok($cmd1t->isa($package), "Created command with tumor and normal samples in tumor mode");
ok($cmd1t->should_run, "Tumor mode should run");
is($cmd1t->sample_for_mode, $tumor_sample, "Sample returned correctly");
ok($cmd1t->alignment_result_for_mode, "Got an alignment result");
ok($cmd1t->link_result_to_build($result, "test_dir", "test_label"), "link_result_to_build ran");
ok(-d $build1->data_directory."/test_dir/tumor", "test_dir_tumor was linked to build");
ok(Genome::SoftwareResult::User->get(software_result => $result, user => $build1, label => "test_label_tumor"),
                                        "SoftwareResult user was created");
is($build1->get_metric("metric1-tumor"), "testMetric", "Tumor metric transferred to build");

my $cmd1n = Test->create(build_id => $build1->id, mode => "normal");
ok($cmd1n->isa($package), "Created command with tumor and normal samples in normal mode");
ok($cmd1n->should_run, "Normal mode should run");
is($cmd1n->sample_for_mode, $normal_sample, "Sample returned correctly");
ok($cmd1n->alignment_result_for_mode, "Got an alignment result");
ok($cmd1n->link_result_to_build($result, "test_dir", "test_label"), "link_result_to_build ran");
ok(-d $build1->data_directory."/test_dir/normal", "test_dir_normal was linked to build");
ok(Genome::SoftwareResult::User->get(software_result => $result, user => $build1, label => "test_label_normal"),
                                        "SoftwareResult user was created");
is($build1->get_metric("metric1-normal"), "testMetric", "Normal metric transferred to build");

my $cmd2t = Test->create(build_id => $build2->id, mode => "tumor");
ok($cmd2t->isa($package), "Created command with tumor only sample in tumor mode");
ok($cmd2t->should_run, "Tumor mode should run");
is($cmd2t->sample_for_mode, $tumor_sample, "Sample returned correctly");
ok($cmd2t->alignment_result_for_mode, "Got an alignment result");
ok($cmd2t->link_result_to_build($result, "test_dir", "test_label"), "link_result_to_build ran");
ok(-d $build2->data_directory."/test_dir/tumor", "test_dir_tumor was linked to build");
ok(Genome::SoftwareResult::User->get(software_result => $result, user => $build2, label => "test_label_tumor"),
                                        "SoftwareResult user was created");
is($build2->get_metric("metric1-tumor"), "testMetric", "Tumor metric transferred to build");

my $cmd2n = Test->create(build_id => $build2->id, mode => "normal");
ok($cmd2n->isa($package), "Created command with tumor only sample in normal mode");
ok(!$cmd2n->should_run, "Normal mode should not run");
is($cmd2n->sample_for_mode, undef, "Sample correctly returned nothing");
ok(!$cmd2n->alignment_result_for_mode, "Did not get an alignment result");
ok(!$cmd2n->link_result_to_build($result, "test_dir", "test_label"), 
    "link_result_to_build does not run if sample doesn't exist");
ok(!-d $build2->data_directory."/test_dir/normal", "test_dir_normal was not linked to build");
ok(!Genome::SoftwareResult::User->get(software_result => $result, user => $build2, label => "test_label_normal"),
                                        "SoftwareResult user was not created");
is($build2->get_metric("metric1-normal"), undef, "Normal metric not transferred to build");

done_testing();

sub setup_objects {
    my $sample1 = Genome::Test::Factory::Sample->setup_object();
    my $sample2 = Genome::Test::Factory::Sample->setup_object(source_id => $sample1->source->id);

    my $model = Genome::Test::Factory::Model::SomaticValidation->setup_object(
                                                            tumor_sample => $sample1,
                                                            normal_sample => $sample2,
                                                            );
    my $build = Genome::Test::Factory::Build->setup_object(model_id => $model->id);
    my $model2 = Genome::Test::Factory::Model::SomaticValidation->setup_object(
                                                            tumor_sample => $sample1,
                                                            processing_profile_id => $model->processing_profile->id,
                                                            );
    my $build2 = Genome::Test::Factory::Build->setup_object(model_id => $model2->id);
    my $merged_result1 = Genome::Test::Factory::InstrumentData::MergedAlignmentResult->setup_object();
    my $merged_result2 = Genome::Test::Factory::InstrumentData::MergedAlignmentResult->setup_object();
    Genome::SoftwareResult::User->create(software_result => $merged_result1, user => $build, label => "merged_alignment");
    Genome::SoftwareResult::User->create(software_result => $merged_result2, user => $build, label => "control_merged_alignment");
    Genome::SoftwareResult::User->create(software_result => $merged_result1, user => $build2, label => "merged_alignment");

    my $temp_dir = Genome::Sys->create_temp_directory;
    my $result = TestResult->__define__(output_dir => $temp_dir, metric1 => "testMetric");

    return ($sample1, $sample2, $build, $build2, $result);
}


