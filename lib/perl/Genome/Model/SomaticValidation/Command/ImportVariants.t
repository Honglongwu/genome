#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use Test::More tests => 8;

use_ok('Genome::Model::SomaticValidation::Command::ImportVariants')
    or die('module under test could not be used');

my $temp_build_data_dir = File::Temp::tempdir('t_SomaticValidation_Build-XXXXX', CLEANUP => 1, TMPDIR => 1);
my $temp_dir = File::Temp::tempdir('Model-Command-Define-SomaticValidation-XXXXX', CLEANUP => 1, TMPDIR => 1);

my @somvar_models = &setup_somatic_variation_models();
for (@somvar_models) {
    isa_ok($_, 'Genome::Model::SomaticVariation', 'setup fake model');
    for my $b ($_->builds) {
        $b->data_directory($temp_build_data_dir);
    }
}

my @snv_files;
for my $i (1..2) {
    my $individual_name = $somvar_models[$i - 1]->normal_model->subject->source->common_name;
    my $f = Genome::Sys->create_temp_file_path . '/' . $individual_name;
    Genome::Sys->create_directory($f);
    $f .= '/variants.snv.anno';
    Genome::Sys->write_file($f, anno_data($i));
    push @snv_files, $f;
}

my $individual_name = $somvar_models[0]->normal_model->subject->source->common_name;
for my $i (3) {
    my $f = Genome::Sys->create_temp_file_path . '/abc/def/TEST';
    Genome::Sys->create_directory($f);
    $f .= "/$individual_name.snv.anno";
    Genome::Sys->write_file($f, anno_data($i));
    push @snv_files, $f;
}
my $indel_file = Genome::Sys->create_temp_file_path . '/' . $individual_name;
Genome::Sys->create_directory($indel_file);
$indel_file .= '/variants.indel.anno';
Genome::Sys->write_file($indel_file,
    join("\t", 2, 25, 29, 'CTCTT', '-', 'DEL'), "\n",
);

my $listing_file = Genome::Sys->create_temp_file_path;
Genome::Sys->write_file($listing_file,
    "snvs\n",
    join("\n", @snv_files), "\n",
    "indels\n",
    $indel_file, "\n"
);

my $cmd = Genome::Model::SomaticValidation::Command::ImportVariants->create(
    variant_file_list => $listing_file,
    models => \@somvar_models,
);
isa_ok($cmd, 'Genome::Model::SomaticValidation::Command::ImportVariants', 'created importer command');

$cmd->dump_status_messages(1);
ok($cmd->execute, 'executed importer command');

my @results = $cmd->results;
is(scalar(@results), 3, 'produced expected number of results');

use Genome::TestObjGenerator::Model::SomaticValidation;
sub setup_somatic_variation_models {
    my $test_profile = Genome::ProcessingProfile::ReferenceAlignment->create(
        name => 'test_profile',
        sequencing_platform => 'solexa',
        dna_type => 'cdna',
        read_aligner_name => 'bwa',
        snv_detection_strategy => 'samtools',
    );

    my $test_somvar_pp = Genome::ProcessingProfile::SomaticVariation->create(
        name => 'test somvar pp',
        snv_detection_strategy => 'samtools r599 [--test=1]',
        tiering_version => 1,
    );

    my $annotation_build = Genome::Model::Build::ImportedAnnotation->__define__(
        model_id => '-1',
    );

    my @somvar_models;
    for(1..2) {
        my $somvar_build = Genome::TestObjGenerator::Model::SomaticValidation->setup_somatic_variation_build();
        my $somvar_model = $somvar_build->model;
        push @somvar_models, $somvar_model;

        my $e = Genome::Model::Event::Build->__define__(
            build_id => $somvar_build->id,
            event_type => 'genome model build',
            event_status => 'Succeeded',
            model_id => $somvar_model->id,
            date_completed => '1999-01-01 15:19:01',
        );
        is($somvar_model->last_complete_build, $somvar_build, 'setup a somatic model with a complete build');

        my $dir = ($temp_dir . '/' . 'fake_samtools_result' . $_);
        Genome::Sys->create_directory($dir);
        my $result = Genome::Model::Tools::DetectVariants2::Result->__define__(
            detector_name => 'the_bed_detector',
            detector_version => 'r599',
            detector_params => '--fake',
            output_dir => Cwd::abs_path($dir),
            id => -2013 + $_,
        );
        $result->lookup_hash($result->calculate_lookup_hash());

        my $data = Genome::Utility::Text::table_to_tab_string([
            [qw(1 10003 10004 A/T)],
            [qw(2  8819  8820 A/G)],
        ]);
        my $bed_file = $dir . '/snvs.hq.bed';
        Genome::Sys->write_file($bed_file, $data);

        $result->add_user(user => $somvar_build, label => 'uses');

    }

    return @somvar_models;
}

sub anno_data {
    my $i = shift;

    my $d = Genome::Utility::Text::table_to_tab_string([
        [1 ,  $i      ,  $i      , 'A' , 'G' , 'SNP'],
        [1 , ($i+100) , ($i+100) , 'A' , 'G' , 'SNP'],
        [1 , ($i+200) , ($i+200) , 'A' , 'G' , 'SNP'],
    ]);

    return $d;
}
