#!/usr/bin/env perl

use above 'Genome';
use Data::Dumper;
use Test::More;

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

my $pkg = "Genome::File::Vcf::Entry";

use_ok($pkg);

my @fields = (
    '1',        # CHROM
    10,         # POS
    '.',        # ID
    'A',        # REF
    'C,G',      # ALT
    '10.3',     # QUAL
    'PASS',     # FILTER
    'A=B;C=D,E',# INFO
    'GT:DP:FT',    # FORMAT
    '0/1:12',   # FIRST_SAMPLE
    '0/2:24:PASS',
    '0/2:24:.',
    '0/2:24:BAD',
);

my $entry_txt = join("\t", @fields);
my $entry = $pkg->create();
$entry->parse($entry_txt);
is($entry->chrom, '1', 'Parsed chromosome');
is($entry->position, '10', 'Parsed position');
ok(!$entry->identifiers, 'Parsed null identifiers');
is($entry->reference_allele, 'A', 'Parsed reference allele');
my @alts = $entry->alternate_alleles;
is_deeply(\@alts, ['C', 'G'], 'Parsed alternate alleles');
my @alleles = $entry->alleles;
is_deeply(\@alleles, ['A', 'C', 'G'], 'All alleles accessor');
is($entry->quality, '10.3', 'Parsed quality');
my @filter = $entry->filter;
is_deeply(\@filter, ['PASS'], 'Parsed filter');
is_deeply($entry->info_fields, { A => 'B', C => 'D,E' }, 'Parsed info fields');
my @format = $entry->format;
is_deeply(\@format, ['GT', 'DP', 'FT'], 'Parsed format');

is($entry->info('A'), 'B', 'Info accessor works for A');
is($entry->info('C'), 'D,E', 'Info accessor works for C');
ok(!$entry->info('K'), 'Info accessor works for unknown field');

is($entry->sample_field(0, 'GT'), '0/1', 'Sample field accessor');
is($entry->sample_field(0, 'DP'), '12', 'Sample field accessor');
is($entry->sample_field(0, 'XX'), undef, 'Sample field accessor');
is($entry->sample_field(1, 'GT'), '0/2', 'Sample field accessor');
is($entry->sample_field(1, 'DP'), '24', 'Sample field accessor');
is($entry->sample_field(1, 'XX'), undef, 'Sample field accessor');

my ($total, %counts) = $entry->allelic_distribution;
is($total, 6, "allelic_distribution: total");
is_deeply(\%counts, {A => 3, C => 1, G => 2}, "allelic_distribution: counts");

($total, %counts) = $entry->allelic_distribution(1);
is($total, 2, "allelic_distribution(1): total");
is_deeply(\%counts, {A => 1, G => 1}, "allelic_distribution(1): counts");


done_testing();
