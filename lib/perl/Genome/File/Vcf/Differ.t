#!/usr/bin/env perl

use above 'Genome';
use Test::More;
use File::Spec;
use Data::Dump qw(pp);
use Genome::File::Vcf::HeaderDiff;

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

my $pkg = "Genome::File::Vcf::Differ";
use_ok($pkg);

test_same();
test_header();

test_more_lines();
test_fewer_lines();

test_chrom();

done_testing();

sub test_same {
    my $differ = new_differ('blessed.vcf', 'same.vcf');

    my $diff = $differ->diff;

    subtest 'NO DIFFERENCES' => sub {
        ok(!defined($diff), 'undef returned when no diff was found');
    };
}

sub test_header {
    my $differ = new_differ('blessed.vcf', 'header.vcf');
    my $diff = $differ->diff;

    subtest 'HEADER' => sub {
        is(ref $diff, 'Genome::File::Vcf::HeaderDiff',
            'found HeaderDiff object when headers diff');

        my $expected = test_file('blessed.vcf');
        is($diff->{_a}, $expected, "Found _a was ($expected)");

        $expected = ['##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">'],
        is_deeply($diff->{_diffs_a}, $expected, "Found _diffs_a was " . pp($expected));


        $expected = test_file('header.vcf');
        is($diff->{_b}, $expected, "Found _b was ($expected)");

        $expected = ['##FORMAT=<ID=GT,Number=1,Type=Integer,Description="Genotype">'],
        is_deeply($diff->{_diffs_b}, $expected, "Found _diffs_b was " . pp($expected));
    };
}

sub test_more_lines {
    my $differ = new_differ('blessed.vcf', 'more_lines.vcf');
    my ($blessed_entry, $other_entry, @columns) = $differ->next();
    is($blessed_entry, undef, 'found undef for BLESSED entry when other file has MORE lines');
}

sub test_fewer_lines {
    my $differ = new_differ('blessed.vcf', 'fewer_lines.vcf');
    my ($blessed_entry, $other_entry, @columns) = $differ->next();
    is($other_entry, undef, 'found undef for OTHER entry when other file has FEWER lines');
}

sub test_chrom {
    my $differ = new_differ('blessed.vcf', 'chrom.vcf');
    my ($blessed_entry, $other_entry, @columns) = $differ->next();
    subtest 'CHROM' => sub{
        is_deeply(\@columns, ['CHROM'], 'Found that only the chromosome differs');
        is($blessed_entry->{chrom}, 1, 'Found expected value for BLESSED');
        is($other_entry->{chrom}, 2, 'Found expected value for OTHER');
    };
}


sub new_differ {
    my ($blessed, $other) = @_;
    return $pkg->new(test_file($blessed), test_file($other));
}

sub test_file {
    return File::Spec->join(__FILE__ . '.d', @_);
}

1;
