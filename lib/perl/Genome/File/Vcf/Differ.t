#!/usr/bin/env perl

use above 'Genome';
use Test::More;
use Test::Output;
use File::Spec;
use Data::Dump qw(pp);
use Genome::File::Vcf::HeaderDiff;
use Genome::File::Vcf::EntryDiff;

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

my $pkg = "Genome::File::Vcf::Differ";
use_ok($pkg);

test_same();

subtest 'HEADER' => sub {
    test_header();
};

subtest 'ENTRY' => sub {
    test_entry();

    test_more_lines();
    test_fewer_lines();

    test_chrom();
};


done_testing();

sub test_same {
    my $differ = new_differ('blessed.vcf', 'same.vcf');

    my $diff = $differ->diff;

        ok(!defined($diff), 'undef returned when no diff was found');
}

sub test_header {
    {
        my $differ = new_differ('blessed.vcf', 'header.vcf');
        my $diff = $differ->diff;

        is(ref $diff, 'Genome::File::Vcf::HeaderDiff',
            'found HeaderDiff object when headers diff');

        my $expected =  sprintf "Lines unique to %s are:\n" .
                        "    ##FORMAT=<ID=GT,Number=1,Type=String,Description=\"Genotype\">\n" .
                        "Lines unique to %s are:\n" .
                        "    ##FORMAT=<ID=GT,Number=1,Type=Integer,Description=\"Genotype\">\n", 
                        test_file('blessed.vcf'), test_file('header.vcf');

        stdout_like(sub { $diff->print },  qr/\Q$expected/, 'Tests the HeaderDiff print method');
    };

    {
        my $differ = new_differ('blessed.vcf', 'samples.vcf');
        my $diff = $differ->diff;

        is(ref $diff, 'Genome::File::Vcf::HeaderDiff',
            'found HeaderDiff object when samples in header diff');

        my $expected =  sprintf "Sample names unique to %s are:\n" .
                        "    H_MN-04-1009-0469-001-1129532\n" .
                        "Sample names unique to %s are:\n" .
                        "    A_MN-04-1009-0469-001-1129531\n", 
                        test_file('blessed.vcf'), test_file('samples.vcf');

        stdout_like(sub { $diff->print },  qr/\Q$expected/, 'Tests the HeaderDiff print method');
    };
}

sub test_entry {
    {
        my $differ = new_differ('blessed.vcf', 'columns.vcf');
        my $diff = $differ->diff;

        is(ref $diff, 'Genome::File::Vcf::EntryDiff',
            'found EntryDiff object when entries diff');

        my $expected = test_file('blessed.vcf');
        is($diff->{_a}, $expected, "Found _a was ($expected)");

        $expected = test_file('columns.vcf');
        is($diff->{_b}, $expected, "Found _b was ($expected)");
    };

    {
        my $differ = new_differ('blessed.vcf', 'columns.vcf');
        my $diff = $differ->diff;

        my $expected = sprintf "Entries at position (1, 10001) have differences in columns: FILTER, ALT\n" .
                    "a: %s, b: %s\n" .
                    "FILTER:\n" .
                    "    a => .\n" .
                    "    b => 5\n" .
                    "ALT:\n" .
                    "    a => .\n" .
                    "    b => 1\n", test_file('blessed.vcf'),
                    test_file('columns.vcf');

        stdout_like(sub { $diff->print }, qr/\Q$expected/, 'Tests the EntryDiff' .
            'print method when chrom and pos are identical');
    };

    {
        my $differ = new_differ('blessed.vcf', 'chrom.vcf');
        my $diff = $differ->diff;

        my $expected = sprintf "Entries refer to different chromosomes and positions:\n"
                  . "         1        10001 %s\n"
                  . "         2        10001 %s\n", test_file('blessed.vcf'),
                  test_file('chrom.vcf');

        stdout_like(sub { $diff->print }, qr/\Q$expected/, 'Tests the EntryDiff' .
            'print method when chrom and/or pos differ');
    };

    {
        my $differ = new_differ('blessed.vcf', 'fewer_lines.vcf');
        my $diff = $differ->diff;

        my $expected = sprintf '%s has fewer lines than %s',
            test_file('fewer_lines.vcf'), test_file('blessed.vcf');

        stdout_like(sub { $diff->print }, qr/\Q$expected/, 'Tests the EntryDiff print' .
            'method when one file has fewer lines');
    };
}

sub test_more_lines {
    my $differ = new_differ('blessed.vcf', 'more_lines.vcf');
    my $diff = $differ->diff;
    is($diff->{_entry_a}, undef, 'found undef for BLESSED entry when other file has MORE lines');
}

sub test_fewer_lines {
    my $differ = new_differ('blessed.vcf', 'fewer_lines.vcf');
    my $diff = $differ->diff;
    is($diff->{_entry_b}, undef, 'found undef for OTHER entry when other file has FEWER lines');
}

sub test_chrom {
    my $differ = new_differ('blessed.vcf', 'chrom.vcf');
    my $diff = $differ->diff;

    is_deeply($diff->{_columns}, ['CHROM'], 'Found that only the chromosome differs');
    is($diff->{_entry_a}->{chrom}, 1, 'Found expected value for BLESSED');
    is($diff->{_entry_b}->{chrom}, 2, 'Found expected value for OTHER');
}

sub new_differ {
    my ($blessed, $other) = @_;
    return $pkg->new(test_file($blessed), test_file($other));
}

sub test_file {
    return File::Spec->join(__FILE__ . '.d', @_);
}

1;
