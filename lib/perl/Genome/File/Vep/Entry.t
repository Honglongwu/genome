#!/usr/bin/env perl

use above 'Genome';
use Data::Dumper;
use Test::More;

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

my $pkg = "Genome::File::Vep::Entry";

use_ok($pkg);

my $vep_str = <<EOS;
HELLO1_1_10_A_T	1:10	T	GENE1	TS1	Transcript	NON_SYNONYMOUS_CODING	3	3	1	D/V	gAt/gTt	-	EX1=e1;HGNC=HELLO1
HELLO2_1_20_G_A	1:20	A	GENE2	TS2	Transcript	STOP_GAINED	6	6	2	W/*	tgG/tgA	-	HGNC=HELLO2
EOS

my @lines = split("\n", $vep_str);
chomp @lines;
my @entries = map {$pkg->new($_)} @lines;
is(scalar(@entries), 2, "Got 2 entries");
ok($entries[0] && $entries[1], "entries non-null");

# entry 1
my %expected = (
    uploaded_variation => "HELLO1_1_10_A_T",
    chrom => 1,
    position => 10,
    location => "1:10",
    allele => "T",
    gene => "GENE1",
    feature => "TS1",
    feature_type => "Transcript",
    consequence => "NON_SYNONYMOUS_CODING",
    cdna_position => 3,
    cds_position => 3,
    protein_position => 1,
    amino_acids => "D/V",
    codons => "gAt/gTt",
    existing_variation => "-",
    extra => {
        EX1 => "e1",
        HGNC => "HELLO1",
    },
);
my %actual;
@actual{keys %expected} = @{$entries[0]}{keys %expected};
is_deeply(\%actual, \%expected, "Fields parsed as expected")
    or diag("ACTUAL:\n" . Dumper(\%actual) . "\nEXPECTED:\n" . Dumper(\%expected));

is($entries[0]->to_string, $lines[0], "to_string");

%expected = (
    uploaded_variation => "HELLO2_1_20_G_A",
    chrom => 1,
    position => 20,
    location => "1:20",
    allele => "A",
    gene => "GENE2",
    feature => "TS2",
    feature_type => "Transcript",
    consequence => "STOP_GAINED",
    cdna_position => 6,
    cds_position => 6,
    protein_position => 2,
    amino_acids => "W/*",
    codons => "tgG/tgA",
    existing_variation => "-",
    extra => {
        HGNC => "HELLO2",
    },
);

%actual = ();
@actual{keys %expected} = @{$entries[1]}{keys %expected};
is_deeply(\%actual, \%expected, "Fields parsed as expected")
    or diag("ACTUAL:\n" . Dumper(\%actual) . "\nEXPECTED:\n" . Dumper(\%expected));
is($entries[1]->to_string, $lines[1], "to_string");

my $expected_line = $lines[1] . ";EXTRA2=2";
$entries[1]->set_extra_field("EXTRA2", 2);
is($entries[1]->to_string, $expected_line, "to_string after adding extra field");

$expected_line =~ s/EXTRA2=2/EXTRA2=3/g;
$entries[1]->set_extra_field("EXTRA2", 3);
is($entries[1]->to_string, $expected_line, "to_string after modifying extra field");

$entries[1]->set_extra_field("EXTRA2");
is($entries[1]->to_string, $lines[1], "to_string after removing extra field");

my $cloned = $entries[0]->clone;
is($cloned->to_string, $entries[0]->to_string, "cloned entry has same string");
$cloned->set_extra_field("CLONE", "TRUE");
is($cloned->{extra}->{CLONE}, "TRUE", "add field to clone");
ok(!exists $entries[0]->{extra}->{CLONE}, "field added to clone not in source object");
is($cloned->to_string, $entries[0]->to_string . ';CLONE=TRUE', "cloned modified independently");

done_testing();
