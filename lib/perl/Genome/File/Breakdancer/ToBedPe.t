#!/usr/bin/env perl

use strict;
use warnings;

use above 'Genome';
use Data::Dumper;
use Test::More;
use Genome::File::Breakdancer::Reader;
use Genome::File::BedPe::Header;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

my $pkg = "Genome::File::Breakdancer::ToBedPe";

use_ok($pkg);

# Parse the 3 breakdancer records for subsequent use
my @input_lines = <DATA>;
my $input_string = join("", @input_lines);
my $fh = new IO::String($input_string);
my $reader = Genome::File::Breakdancer::Reader->fhopen($fh, "test");
my @entries;
while (my $entry = $reader->next) {
    push @entries, $entry;
}
is(scalar @entries, 3, "Got 3 entries");


subtest "convert" => sub {
    my $bpe_header = new Genome::File::BedPe::Header([]);

    my $slop = 15;
    my $name_idx = 0;
    my $name_gen = sub {
        ++$name_idx;
        return "name-$name_idx";
    };

    my $converter = new Genome::File::Breakdancer::ToBedPe($bpe_header, $slop, $name_gen);

    my @converted = map {$converter->convert($_)} @entries;
    my @chrom1s = map {$_->{chrom1}} @converted;
    my @chrom2s = map {$_->{chrom2}} @converted;
    is_deeply(\@chrom1s, [1..3], "chrom1 set correctly");
    is_deeply(\@chrom2s, [4..6], "chrom2 set correctly");

    my @start1s = map {$_->{start1}} @converted;
    my @start2s = map {$_->{start2}} @converted;
    # with 15bp slop, the first position 10 would be -5. We want to make sure
    # that we get 0 instead
    is_deeply(\@start1s, [0, 5, 15], "start1 set correctly");
    is_deeply(\@start2s, [5, 6, 7], "start2 set correctly");

    my @end1s = map {$_->{end1}} @converted;
    my @end2s = map {$_->{end2}} @converted;
    is_deeply(\@end1s, [25, 35, 45], "end1 set correctly");
    is_deeply(\@end2s, [35, 36, 37], "end1 set correctly");

    my @names = map {$_->{name}} @converted;
    is_deeply(\@names, [map {"name-$_"} 1..3], "name set correctly");

    my @scores = map {$_->{score}} @converted;
    is_deeply(\@scores, [35, 32, 43], "score set correctly");

};

subtest "convert" => sub {
    my $bpe_header = new Genome::File::BedPe::Header([]);
    $bpe_header->set_custom_fields("size", "lib1_count", "lib2_count");

    my $slop = 15;
    my $name_idx = 0;
    my $name_gen = sub {
        ++$name_idx;
        return "name-$name_idx";
    };

    my $converter = new Genome::File::Breakdancer::ToBedPe($bpe_header, $slop, $name_gen);
    $converter->add_generated("size", sub {
        my $entry = shift;
        return $entry->{size};
        });

    for my $i (1..2) {
        $converter->add_generated("lib${i}_count", sub {
            my $entry = shift;
            return $entry->lib_read_count("lib$i");
            });
    }

    my @converted = map {$converter->convert($_)} @entries;
    my @sizes = map {$_->custom_by_name("size")} @converted;
    is_deeply(\@sizes, [100, -200, -300], "size gets converted");

    my @raw_fields = map {[split("\t", $_->to_string)]} @converted;
    my @eleventh_fields = map {$_->[10]} @raw_fields;
    is_deeply(\@eleventh_fields, [100, -200, -300], "size is in the correct position");

    my @lib1_counts = map {$_->custom_by_name("lib1_count")} @converted;
    is_deeply(\@lib1_counts, [2, 3, 4], "lib1_counts");

    my @lib2_counts = map {$_->custom_by_name("lib2_count")} @converted;
    is_deeply(\@lib2_counts, [0, 5, 6], "lib2_counts");
};

done_testing();

__DATA__
1	10	2+0-	4	20	0+2-	DEL	100	35	2	lib1|2,2.89
2	20	16+5-	5	21	16+5-	INS	-200	32	3	lib1|3,0.01:lib2|5,NA
3	30	3+8-	6	22	3+8-	ITX	-300	43	3	lib1|4,NA:lib2|6,NA
