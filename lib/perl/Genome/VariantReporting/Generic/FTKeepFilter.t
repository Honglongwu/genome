#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above 'Genome';
use Genome::File::Vcf::Entry;
use Test::More;
use Test::Exception;

my $pkg = 'Genome::VariantReporting::Generic::FTKeepFilter';
use_ok($pkg);
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('filters', $pkg->name), $pkg);

my %pass_return_values = (
    C => 1,
    G => 1,
);

my %fail_return_values = (
    C => 0,
    G => 0,
);

subtest "pass" => sub {
    my $filter = $pkg->create(
        sample_name => "S1",
    );

    lives_ok(sub {$filter->validate}, "Filter validates ok");

    my $ft_value = "PASS";
    my $entry = create_entry($ft_value);
    is_deeply({$filter->filter_entry($entry)}, \%pass_return_values, "Entry $ft_value passes filter PASS");

    $ft_value = "fail";
    $entry = create_entry($ft_value);
    is_deeply({$filter->filter_entry($entry)}, \%fail_return_values, "Entry $ft_value doesn't pass filter fail");

    $ft_value = ".";
    $entry = create_entry($ft_value);
    is_deeply({$filter->filter_entry($entry)}, \%fail_return_values, "Entry $ft_value doesn't pass filter .");

    $ft_value = undef;
    $entry = create_entry($ft_value);
    is_deeply({$filter->filter_entry($entry)}, \%pass_return_values, "Entry $ft_value passes filter with no filter set");
};

subtest "pass more than one filter" => sub {
    my @keep_filter_values = ('PASS', 'FalsePositive');
    my $filter = $pkg->create(
        sample_name => "S1",
        keep_filter_values => \@keep_filter_values
    );
    lives_ok(sub {$filter->validate}, "Filter validates ok");

    my $ft_value = "PASS";
    my $entry = create_entry($ft_value);
    is_deeply({$filter->filter_entry($entry)}, \%pass_return_values, "Entry $ft_value passes filter " . join(";", @keep_filter_values));

    $ft_value = "FalsePositive";
    $entry = create_entry($ft_value);
    is_deeply({$filter->filter_entry($entry)}, \%pass_return_values, "Entry $ft_value passes filter " . join(";", @keep_filter_values));

    $ft_value = "PASS;FalsePositive";
    $entry = create_entry($ft_value);
    is_deeply({$filter->filter_entry($entry)}, \%pass_return_values, "Entry $ft_value passes filter " . join(";", @keep_filter_values));

    $ft_value = "other";
    $entry = create_entry($ft_value);
    is_deeply({$filter->filter_entry($entry)}, \%fail_return_values, "Entry $ft_value doesn't pass filter " . join(";", @keep_filter_values));

    $ft_value = ".";
    $entry = create_entry($ft_value);
    is_deeply({$filter->filter_entry($entry)}, \%fail_return_values, "Entry $ft_value doesn't pass filter " . join(";", @keep_filter_values));

    $ft_value = "PASS;other";
    $entry = create_entry($ft_value);
    is_deeply({$filter->filter_entry($entry)}, \%pass_return_values, "Entry $ft_value passes filter " . join(";", @keep_filter_values));
};

subtest "underspecified filter" => sub {
    my $filter = $pkg->create;
    dies_ok(sub {$filter->validate}, "Filter does not validate");
};

sub create_vcf_header {
    my $header_txt = <<EOS;
##fileformat=VCFv4.1
##FILTER=<ID=PASS,Description="Passed all filters">
##FILTER=<ID=BAD,Description="This entry is bad and it should feel bad">
##INFO=<ID=A,Number=1,Type=String,Description="Info field A">
##INFO=<ID=C,Number=A,Type=String,Description="Info field C (per-alt)">
##INFO=<ID=E,Number=0,Type=Flag,Description="Info field E">
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Depth">
##FORMAT=<ID=FT,Number=.,Type=String,Description="Filter">
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	S1	S2	S3	S4
EOS
    my @lines = split("\n", $header_txt);
    my $header = Genome::File::Vcf::Header->create(lines => \@lines);
    return $header
}

sub create_entry {
    my $ft_value = shift;

    my @fields = (
        '1',            # CHROM
        10,             # POS
        '.',            # ID
        'A',            # REF
        'C,G',            # ALT
        '10.3',         # QUAL
        'PASS',         # FILTER
        'A=B;C=8,9;E',  # INFO
        'GT:DP:FT',     # FORMAT
    );
    if (defined $ft_value) {
        push @fields, "0/1:12:$ft_value";
    }

    my $entry_txt = join("\t", @fields);
    my $entry = Genome::File::Vcf::Entry->new(create_vcf_header(), $entry_txt);
    return $entry;
}

done_testing();
