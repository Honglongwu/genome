#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use Genome::File::Vcf::Entry;

my $pkg = 'Genome::VariantReporting::Generic::VariantTypeInterpreter';
use_ok($pkg);
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('interpreters', $pkg->name), $pkg);

subtest "SNP" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected_return_values = (
        C => {
            variant_type => "snp",
        }
    );
    my $entry = create_entry('A');
    is_deeply({$interpreter->interpret_entry($entry, ['C'])}, \%expected_return_values, "Entry gets interpreted correctly");
};

subtest "Insertion" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected_return_values = (
        AT => {
            variant_type => "ins",
        }
    );
    my $entry = create_entry('A');
    is_deeply({$interpreter->interpret_entry($entry, ['AT'])}, \%expected_return_values, "Entry gets interpreted correctly");
};

subtest "Deletion" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected_return_values = (
        A => {
            variant_type => "del",
        }
    );
    my $entry = create_entry('AT');
    is_deeply({$interpreter->interpret_entry($entry, ['A'])}, \%expected_return_values, "Entry gets interpreted correctly");
};

subtest "Other" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected_return_values = (
        CG => {
            variant_type => "other",
        }
    );
    my $entry = create_entry('AT');
    is_deeply({$interpreter->interpret_entry($entry, ['CG'])}, \%expected_return_values, "Entry gets interpreted correctly");
};

done_testing;

sub create_vcf_header {
    my $header_txt = <<EOS;
##fileformat=VCFv4.1
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	S1	S2	S3	S4
EOS
    my @lines = split("\n", $header_txt);
    my $header = Genome::File::Vcf::Header->create(lines => \@lines);
    return $header
}

sub create_entry {
    my $ref = shift;
    my @fields = (
        '1',            # CHROM
        10,             # POS
        '.',            # ID
        $ref,            # REF
        '.',            # ALT
        '.',            # QUAL
    );

    my $entry_txt = join("\t", @fields);
    my $entry = Genome::File::Vcf::Entry->new(create_vcf_header(), $entry_txt);
    return $entry;
}
