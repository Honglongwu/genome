#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use Genome::File::Vcf::Entry;
use Genome::VariantReporting::BamReadcount::TestHelper qw(
    bam_readcount_line create_entry bam_readcount_line_deletion create_deletion_entry);

my $pkg = 'Genome::VariantReporting::BamReadcount::ManySamplesVafInterpreter';
use_ok($pkg);
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('interpreters', $pkg->name), $pkg);

subtest "one alt allele" => sub {
    my $interpreter = $pkg->create(
        sample_names => ["S1", "S2", "S3"]
    );
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected = (
        G => {
            S1 => {
                vaf => 1,
                ref_count => 3,
                var_count => 341,
                per_library_var_count => 'Solexa-135852:155,Solexa-135853:186',
                per_library_ref_count => 'Solexa-135852:2,Solexa-135853:1',
                per_library_vaf => 'Solexa-135852:45.0581395348837,Solexa-135853:54.0697674418605',
            },
            S2 => {
                vaf => 1,
                ref_count => 3,
                var_count => 341,
                per_library_var_count => 'Solexa-135852:155,Solexa-135853:186',
                per_library_ref_count => 'Solexa-135852:2,Solexa-135853:1',
                per_library_vaf => 'Solexa-135852:45.0581395348837,Solexa-135853:54.0697674418605',
            },
            S3 => {
                vaf => 1,
                ref_count => 3,
                var_count => 341,
                per_library_var_count => 'Solexa-135852:155,Solexa-135853:186',
                per_library_ref_count => 'Solexa-135852:2,Solexa-135853:1',
                per_library_vaf => 'Solexa-135852:45.0581395348837,Solexa-135853:54.0697674418605',
            }
        }
    );

    my $entry = create_entry(bam_readcount_line);
    my %result = $interpreter->interpret_entry($entry, ['G']);
    is(keys %result, keys %expected, "First level keys as expected");
    is(keys %{$result{G}}, keys %{$expected{G}}, "Second level keys as expected");
    cmp_ok($result{G}->{S1}->{vaf}, ">", 99, 'vaf is in the desired range');
    cmp_ok($result{G}->{S1}->{vaf},  "<", 100, 'vaf is in the desired range');
    is($result{G}->{S1}->{ref_count}, $expected{G}->{S1}->{ref_count}, 'ref count is correct');
    is($result{G}->{S1}->{var_count}, $expected{G}->{S1}->{var_count}, 'var count is correct');
    is($result{G}->{S1}->{per_library_var_count}, $expected{G}->{S1}->{per_library_var_count}, 'per lib var count is correct');
    is($result{G}->{S1}->{per_library_ref_count}, $expected{G}->{S1}->{per_library_ref_count}, 'per lib ref count is correct');
    is($result{G}->{S1}->{per_library_vaf}, $expected{G}->{S1}->{per_library_vaf}, 'per lib vaf is correct');
};

done_testing;
