#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use Genome::File::Vcf::Entry;

my $pkg = "Genome::VariantReporting::Expert::Vep::DamagingFilter";
use_ok($pkg) or die;
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('filters', $pkg->name), $pkg);

my $passes = {
    C => 1,
    G => 1,
};
my $fails = {
    C => 0,
    G => 0,
};

subtest "variant in splice site" => sub {
    my $entry = create_entry("splice_donor_variant");
    is_deeply({$pkg->filter_entry($entry)}, $passes);
};

subtest "intergenic variant" => sub {
    my $entry = create_entry("intergenic_variant");
    is_deeply({$pkg->filter_entry($entry)}, $fails);
};

subtest "nonsynonymous damaging variant in sift" => sub {
    my $entry = create_entry("missense_variant", "damaging(0.000001)", "tolerated(0.05)");
    is_deeply({$pkg->filter_entry($entry)}, $passes);
};

subtest "nonsynonymous damaging variant in polyphen" => sub {
    my $entry = create_entry("missense_variant", "tolerated(0.05)", "damaging(0.0001)");
    is_deeply({$pkg->filter_entry($entry)}, $passes);
};

subtest "nonsynonymous non-damaging variant" => sub {
    my $entry = create_entry("missense_variant", "tolerated(0.06)", "tolerated(0.06)");
    is_deeply({$pkg->filter_entry($entry)}, $fails);
};

subtest "nonsynonymous variant with no sift or polyphen scores" => sub {
    my $entry = create_entry("missense_variant");
    is_deeply({$pkg->filter_entry($entry)}, $passes);
};

sub create_vcf_header {
    my $header_txt = <<EOS;
##fileformat=VCFv4.1
##FILTER=<ID=PASS,Description="Passed all filters">
##FILTER=<ID=BAD,Description="This entry is bad and it should feel bad">
##INFO=<ID=CSQ,Number=.,Type=String,Description="Consequence type as predicted by VEP. Format: Allele|Gene|Feature|Feature_type|Consequence|cDNA_position|CDS_position|Protein_position|Amino_acids|Codons|Existing_variation|DISTANCE|CANONICAL|SYMBOL|SYMBOL_SOURCE|SIFT|PolyPhen|HGVSc|HGVSp|Condel">
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Depth">
##FORMAT=<ID=FT,Number=.,Type=String,Description="Filter">
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	S1	S2	S3	S4
EOS
    my @lines = split("\n", $header_txt);
    my $header = Genome::File::Vcf::Header->create(lines => \@lines);
    return $header
}

sub create_entry {
    my $consequence = shift;
    my $sift = shift;
    my $polyphen = shift;
    unless (defined $sift) {
        $sift = "";
    }
    unless (defined $polyphen) {
        $polyphen = "";
    }
    my @fields = (
        '1',            # CHROM
        10,             # POS
        '.',            # ID
        'A',            # REF
        'C,G',            # ALT
        '10.3',         # QUAL
        'PASS',         # FILTER
        "CSQ=C|ENSG00000223659|ENST00000452176|Transcript|$consequence|||||||4680|YES|RP5-857K21.5|Clone_based_vega_gene|$sift|$polyphen|||,G|ENSG00000223695|ENST00000452176|Transcript|$consequence|||||||4680|YES|RP5-857K22.5|Clone_based_vega_gene|$sift|$polyphen|example_hgvsc||example_condel",  # INFO
        'GT:DP',     # FORMAT
        "0/1:12",   # FIRST_SAMPLE
    );

    my $entry_txt = join("\t", @fields);
    my $entry = Genome::File::Vcf::Entry->new(create_vcf_header(), $entry_txt);
    return $entry;
}
done_testing;

