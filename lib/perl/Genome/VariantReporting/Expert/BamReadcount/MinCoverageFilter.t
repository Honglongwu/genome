#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above 'Genome';
use Test::Exception;
use Test::More;
use Genome::VariantReporting::Expert::BamReadcount::TestHelper qw(bam_readcount_line create_entry);

my $pkg = 'Genome::VariantReporting::Expert::BamReadcount::MinCoverageFilter';
use_ok($pkg);
my $factory = Genome::VariantReporting::Factory->create();
lives_ok( sub { $factory->get_class('filters', $pkg->name) }, "get_class works on $pkg" );

my %pass = (
    G => 1,
    C => 1,
);

my %fail = (
    G => 0,
    C => 0,
);

subtest "pass" => sub {
    my $min_coverage = 300;
    my $filter = $pkg->create(min_coverage => $min_coverage, sample_name => "S1");
    lives_ok(sub {$filter->validate}, "Filter validates");
    my $entry = create_entry(bam_readcount_line);
    is_deeply({$filter->filter_entry($entry)}, \%pass, "Entry passes filter with min_coverage $min_coverage");
};

subtest "fail" => sub {
    my $min_coverage = 400;
    my $filter = $pkg->create(min_coverage => $min_coverage, sample_name => "S1");
    lives_ok(sub {$filter->validate}, "Filter validates");

    my $entry = create_entry(bam_readcount_line);
    is_deeply({$filter->filter_entry($entry)}, \%fail, "Entry does not pass filter with min_coverage $min_coverage");

    $entry = create_entry("");
    is_deeply({$filter->filter_entry($entry)}, \%fail, "Entry without coverage does not pass filter with min_coverage $min_coverage");
};

subtest "under-specified parameters" => sub {
    my $filter = $pkg->create();
    dies_ok(sub {$filter->validate}, "Filter without enough parameters does not validate");
};

done_testing();
