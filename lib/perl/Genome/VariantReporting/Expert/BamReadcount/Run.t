#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use Sub::Install;
use Genome::Test::Factory::InstrumentData::MergedAlignmentResult;
use Genome::Model::Tools::DetectVariants2::Result::Vcf;
use Genome::Model::Tools::Sam::Readcount;
use Genome::Model::Tools::Bed::Convert::VcfToBed;
use Genome::VariantReporting::TestHelpers qw(test_cmd_and_result_are_in_sync);
use Genome::Utility::Test qw(compare_ok);

use Test::More;


my $cmd_class = 'Genome::VariantReporting::Expert::BamReadcount::Run';
use_ok($cmd_class) or die;

my $factory = Genome::VariantReporting::Factory->create();
isa_ok($factory->get_class('runners', $cmd_class->name), $cmd_class);

my $result_class = 'Genome::VariantReporting::Expert::BamReadcount::RunResult';
use_ok($result_class) or die;

my $cmd = generate_test_cmd();
my $test_data_dir = Genome::Utility::Test->data_dir_ok($cmd_class, 'v1');
my $input_vcf = $test_data_dir . '/input.vcf';
my $expected_output_vcf  = $test_data_dir . '/expected.vcf';
my $expected_region_list = $test_data_dir . '/expected.region_list';

my $test_region_list = $result_class->make_region_file($input_vcf);
compare_ok($test_region_list, $expected_region_list, 'bam region_list created ok');

ok($cmd->execute(), 'Command executed');
is(ref($cmd->output_result), $result_class, 'Found software result after execution');
test_cmd_and_result_are_in_sync($cmd);

done_testing();

sub generate_test_cmd {
    Sub::Install::reinstall_sub({
        into => 'Genome::Model::Tools::Sam::Readcount',
        as => '_execute_body',
        code => sub {my $self = shift; my $file = $self->output_file; `touch $file`;},
    });


    my $aligned_bam_result = Genome::Test::Factory::InstrumentData::MergedAlignmentResult->setup_object(
        bam_file => 1,
        reference_fasta => 1,
    );
    my $input_result = $result_class->__define__();
    Sub::Install::reinstall_sub({
        into => $result_class,
        as => 'input_result_file_path',
        code => sub {return $input_vcf;},
    });

    my %params = (
        aligned_bam_result => $aligned_bam_result,
        input_result => $input_result,
        variant_type => 'snvs',
        version => 0.5,
        per_library => 1,
        minimum_mapping_quality => 0,
        minimum_base_quality => 0,
        max_count => 1,
        insertion_centric => 1,
    );
    my $cmd = $cmd_class->create(%params);
    return $cmd
}
