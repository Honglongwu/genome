#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use Test::More;
use Genome::Utility::Test qw(compare_ok);
use Set::Scalar;
#use Test::Exception; #  lives/dies_ok { $foo->method } 'this died'; throws_ok( sub { $foo->method }, qw/an error/, 'caught');
#use Sub::Install; # Sub::Install::install_sub({code => sub {} , into => $package, as => $subname});
#use Test::MockObject::Extends; # my $o = T:MO:E->new($obj); $o->mock($methodname, sub { }); $o->unmock($methodname);

my $pkg = 'Genome::VariantReporting::PostProcessing::CombineReports';
use_ok($pkg) or die;
my $data_dir = __FILE__.".d";

subtest "test with headers" => sub {
    my $report_a = File::Spec->join($data_dir, 'report_a.header');
    my $report_b = File::Spec->join($data_dir, 'report_b.header');
    my $expected = File::Spec->join($data_dir, 'expected.header');

    my $output_file = Genome::Sys->create_temp_file_path;
    my $cmd = $pkg->create(reports => [$report_a, $report_b], sort_columns => ['chr', 'pos'], contains_header => 1, output_file => $output_file);
    isa_ok($cmd, $pkg);

    my @expected_header = qw(chr pos data1 data2);
    is_deeply([$cmd->get_header($report_a)], \@expected_header, 'Header looks as expected');
    is_deeply([$cmd->get_master_header], \@expected_header, 'Master header looks as expected');

    is_deeply([$cmd->get_sort_column_numbers], [1,2], 'get_sort_column_numbers works');
    is($cmd->get_sort_params, '-n -k1 -k2', 'get_sort_params works');

    ok($cmd->execute, 'Executed the test command');
    compare_ok($output_file, $expected, 'Output file looks as expected');
};

subtest "test without headers" => sub {
    my $report_a = File::Spec->join($data_dir, 'report_a.noheader');
    my $report_b = File::Spec->join($data_dir, 'report_b.noheader');
    my $expected = File::Spec->join($data_dir, 'expected.noheader');

    my $output_file = Genome::Sys->create_temp_file_path;
    my $cmd = $pkg->create(reports => [$report_a, $report_b], sort_columns => ['1', '2'], contains_header => 0, output_file => $output_file);
    isa_ok($cmd, $pkg);

    my @expected_header = qw(1 2 3 4);
    is_deeply([$cmd->get_header($report_a)], \@expected_header, 'Header looks as expected');
    is_deeply([$cmd->get_master_header], \@expected_header, 'Master header looks as expected');

    is_deeply([$cmd->get_sort_column_numbers], [1,2], 'get_sort_column_numbers works');
    is($cmd->get_sort_params, '-n -k1 -k2', 'get_sort_params works');

    ok($cmd->execute, 'Executed the test command');
    compare_ok($output_file, $expected, 'Output file looks as expected');
};

done_testing();
