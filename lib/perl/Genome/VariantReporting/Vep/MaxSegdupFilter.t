#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use Genome::File::Vcf::Entry;

my $pkg = 'Genome::VariantReporting::Vep::MaxSegdupFilter';
use_ok($pkg);
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('filters', $pkg->name), $pkg);

subtest "with bad info_tag" => sub {
    my $filter = $pkg->create(info_tag => 'BAD_TAG', threshold => 96);
    lives_ok(sub {$filter->validate}, "Filter validates");

    my $entry = create_entry_with_vep('');
    dies_ok(sub {$filter->filter_entry($entry)}, "Filter with a info tag not in the header file should die");
};

subtest "with invalid threshold" => sub {
    my $filter = $pkg->create(info_tag => 'SD', threshold => 'NOT_NUMBER');
    lives_ok(sub {$filter->validate}, "Filter validates");

    my $entry = create_entry_with_vep('');
    dies_ok(sub {$filter->filter_entry($entry)}, "Filter with a non number threshold should die");
};


subtest "with failing segdup" => sub {
    my $filter = $pkg->create(info_tag => 'SD', threshold => 90.88);
    lives_ok(sub {$filter->validate}, "Filter validates");

    my %expected_return_values = (
        C => 0,
        G => 0,
    );
    my $entry = create_entry_with_vep('SD=93.68');
    is_deeply({$filter->filter_entry($entry)}, \%expected_return_values, "Entry gets filtered correctly");
};

subtest "with passing segdup" => sub {
    my $filter = $pkg->create(info_tag => 'SD', threshold => 90);
    lives_ok(sub {$filter->validate}, "Filter validates");

    my %expected_return_values = (
        C => 1,
        G => 1,
    );
    my $entry = create_entry_with_vep('A=B;SD=86;C=8,9;E');
    is_deeply({$filter->filter_entry($entry)}, \%expected_return_values, "Entry gets filtered correctly");
};


done_testing;

sub create_vcf_header {
    my $header_txt = <<EOS;
##fileformat=VCFv4.1
##FILTER=<ID=PASS,Description="Passed all filters">
##FILTER=<ID=BAD,Description="This entry is bad and it should feel bad">
##INFO=<ID=SD,Number=1,Type=String,Description="Info field for segdup">
##INFO=<ID=A,Number=1,Type=String,Description="Info field A">
##INFO=<ID=C,Number=A,Type=String,Description="Info field C (per-alt)">
##INFO=<ID=E,Number=0,Type=Flag,Description="Info field E">
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Depth">
##FORMAT=<ID=FT,Number=.,Type=String,Description="Filter">
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	S1	S2	S3	S4
EOS
    my @lines = split("\n", $header_txt);
    my $header = Genome::File::Vcf::Header->create(lines => \@lines);
    return $header
}

sub create_entry_with_vep {
    my $info = shift;

    my @fields = (
        '1',            # CHROM
        10,             # POS
        '.',            # ID
        'A',            # REF
        'C,G',          # ALT
        '10.3',         # QUAL
        'PASS',         # FILTER
        $info,          # INFO
        "GT:DP",        # FORMAT
        "0/1:12"        # S1
    );

    my $entry_txt = join("\t", @fields);
    my $entry = Genome::File::Vcf::Entry->new(create_vcf_header(), $entry_txt);
    return $entry;
}
