package Genome::VariantReporting::Framework::Command::Wrappers::TestHelpers;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;
use Genome;
use Genome::Test::Factory::Model::SomaticValidation;
use Genome::Test::Factory::ProcessingProfile::SomaticValidation;
use Genome::Test::Factory::Build;
use Exporter 'import';

our @EXPORT_OK = qw(get_build);

sub _get_pp {
    return Genome::Test::Factory::ProcessingProfile::SomaticValidation->setup_object();
}
Memoize::memoize("_get_pp");

my $fl_counter = -1;
sub _get_or_create_feature_list {
    my $name = shift;
    my $feature_list = Genome::FeatureList->get(name => $name);
    unless ($feature_list) {
        $feature_list = Genome::FeatureList->__define__(name => $name, id => $fl_counter);
        $fl_counter--;
    }
    return $feature_list;
}

sub get_build {
    my ($roi_name, $tumor_sample, $normal_sample) = @_;
    my $roi = _get_or_create_feature_list($roi_name);
    my $pp = _get_pp;
    my $discovery_model = Genome::Test::Factory::Model::SomaticValidation->setup_object(processing_profile_id => $pp->id);
    $discovery_model->tumor_sample($tumor_sample);
    $discovery_model->normal_sample($normal_sample);
    $discovery_model->add_region_of_interest_set(id => $roi->id);
    my $discovery_build = Genome::Test::Factory::Build->setup_object(model_id => $discovery_model->id);
    return $discovery_build;
}

1;

