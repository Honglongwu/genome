#!/usr/bin/perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Deep;
use Test::Exception;
use File::Spec;

my $pkg = "Genome::Annotation::Plan";
use_ok($pkg) || die;

my $plan_file = File::Spec->join(__FILE__ . ".d", "test.yaml");

my $plan = $pkg->create_from_file($plan_file);
ok($plan, "Made a plan from file ($plan_file).");

my $expected_hashref = {
    root => {
        experts   => {
            expert_one => {
                e1_p1 => 'something',
                e1_p2 => 'something else'
            },
            expert_two => {
                e2_p1 => 'something',
                e2_p2 => 'something else'
            }
        },
        params    => {},
        reporters => {
            reporter_alpha => {
                filters      => {
                    filter_a => {
                        fa_p1 => 'something',
                        fa_p2 => 'something else'
                    },
                    filter_b => {
                        fb_p1 => 'something',
                        fb_p2 => 'something else'
                    }
                },
                interpreters => {
                    interpreter_x => {
                        ix_p1 => 'something',
                        ix_p2 => 'something else'
                    },
                    interpreter_y => {
                        iy_p1 => 'something',
                        iy_p2 => 'something else'
                    }
                },
                params       => {
                    ra_p1 => 'something',
                    ra_p2 => 'something else'
                }
            },
            reporter_beta  => {
                interpreters => { interpreter_x => {
                        ix_p1 => 'something',
                        ix_p2 => 'something else'
                    } },
                params       => {
                    rb_p1 => 'something',
                    rb_p2 => 'something else'
                }
            }
        }
    }
};

is_deeply($plan->as_hashref, $expected_hashref, "Got expected hashref from 'as_hashref'.");
is_deeply($pkg->create_from_hashref($plan->as_hashref->{root})->as_hashref, $plan->as_hashref, "Roundtrip test successful.");

done_testing();
