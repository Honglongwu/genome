#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::Exception;
use Test::More;
use Genome::File::Vcf::Entry;

my $pkg = "Genome::Annotation::VepInterpreter";
use_ok($pkg);

subtest "one alt allele" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected_return_values = (
        C => {
            transcript_name   => 'ENST00000452176',
            trv_type          => 'DOWNSTREAM',
            amino_acid_change => '',
            default_gene_name => 'RP5-857K21.5',
            ensembl_gene_id   => 'ENSG00000223659',
        }
    );
    my $entry = create_entry();
    is_deeply({$interpreter->process_entry($entry, ['C'])}, \%expected_return_values, "Entry gets interpreted correctly");
};


subtest "two alt allele" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected_return_values = (
        C => {
            transcript_name   => 'ENST00000452176',
            trv_type          => 'DOWNSTREAM',
            amino_acid_change => '',
            default_gene_name => 'RP5-857K21.5',
            ensembl_gene_id   => 'ENSG00000223659',
        },
        G => {
            transcript_name   => 'ENST00000452176',
            trv_type          => 'DOWNSTREAM',
            amino_acid_change => '',
            default_gene_name => 'RP5-857K22.5',
            ensembl_gene_id   => 'ENSG00000223695',
        },
    );
    my $entry = create_entry();
    is_deeply({$interpreter->process_entry($entry, ['C', 'G'])}, \%expected_return_values, "Entry gets interpreted correctly");
};

sub create_vcf_header {
    my $header_txt = <<EOS;
##fileformat=VCFv4.1
##FILTER=<ID=PASS,Description="Passed all filters">
##FILTER=<ID=BAD,Description="This entry is bad and it should feel bad">
##INFO=<ID=CSQ,Number=.,Type=String,Description="Consequence type as predicted by VEP. Format: Allele|Gene|Feature|Feature_type|Consequence|cDNA_position|CDS_position|Protein_position|Amino_acids|Codons|Existing_variation|DISTANCE|CANONICAL|SYMBOL|SYMBOL_SOURCE|SIFT|PolyPhen|HGVSc|HGVSp|Condel">
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Depth">
##FORMAT=<ID=FT,Number=.,Type=String,Description="Filter">
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	S1	S2	S3	S4
EOS
    my @lines = split("\n", $header_txt);
    my $header = Genome::File::Vcf::Header->create(lines => \@lines);
    return $header
}

sub create_entry {
    my @fields = (
        '1',            # CHROM
        10,             # POS
        '.',            # ID
        'A',            # REF
        'C,G',            # ALT
        '10.3',         # QUAL
        'PASS',         # FILTER
        'CSQ=C|ENSG00000223659|ENST00000452176|Transcript|DOWNSTREAM|||||||4680|YES|RP5-857K21.5|Clone_based_vega_gene|||||,G|ENSG00000223695|ENST00000452176|Transcript|DOWNSTREAM|||||||4680|YES|RP5-857K22.5|Clone_based_vega_gene|||||',  # INFO
        'GT:DP',     # FORMAT
        "0/1:12",   # FIRST_SAMPLE
    );

    my $entry_txt = join("\t", @fields);
    my $entry = Genome::File::Vcf::Entry->new(create_vcf_header(), $entry_txt);
    return $entry;
}

done_testing;
