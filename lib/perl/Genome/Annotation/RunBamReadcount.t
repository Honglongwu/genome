#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use Sub::Install;
use Genome::Test::Factory::InstrumentData::MergedAlignmentResult;
use Genome::Model::Tools::DetectVariants2::Result::Vcf;
use Genome::Model::Tools::Sam::Readcount;
use Genome::Model::Tools::Bed::Convert::VcfToBed;
use Genome::Annotation::Detail::TestHelpers qw(test_cmd_and_result_are_in_sync);

use Test::More;

my $cmd_class = 'Genome::Annotation::RunBamReadcount';
use_ok($cmd_class) or die;

my $cmd = generate_test_cmd();

ok($cmd->execute(), 'Command executed');
is(ref($cmd->software_result), 'Genome::Annotation::RunBamReadcount::Result', 'Found software result after execution');
test_cmd_and_result_are_in_sync($cmd);

done_testing();

sub generate_test_cmd {
    Sub::Install::reinstall_sub({
        into => 'Genome::Model::Tools::Bed::Convert::VcfToBed',
        as => '_execute_body',
        code => sub {return 1;},
    });
    Sub::Install::reinstall_sub({
        into => 'Genome::Model::Tools::Sam::Readcount',
        as => '_execute_body',
        code => sub {my $self = shift; my $file = $self->output_file; `touch $file`;},
    });


    my $aligned_bam_result = Genome::Test::Factory::InstrumentData::MergedAlignmentResult->setup_object(
        bam_file => 1,
        reference_fasta => 1,
    );
    my $vcf_result = Genome::Model::Tools::DetectVariants2::Result::Vcf::Combine->__define__();
    Sub::Install::reinstall_sub({
        into => 'Genome::Model::Tools::DetectVariants2::Result::Vcf',
        as => 'get_vcf',
        code => sub {return 1;},
    });

    my %params = (
        aligned_bam_result => $aligned_bam_result,
        vcf_result => $vcf_result,
        variant_type => 'snvs',
        use_version => 0.5,
    );
    my $cmd = $cmd_class->create(%params);
    return $cmd
}
