#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{NO_LSF} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Deep;
use File::Basename qw(basename);
use File::Spec;
use Genome::Annotation::TestHelpers qw(get_test_somatic_variation_build get_test_dir);
use Genome::Utility::Test qw(compare_ok);
use Sub::Install qw(reinstall_sub);

my $pkg = 'Genome::Annotation::Command::AnnotateBuild';
use_ok($pkg);

my $version = 4;
my $build_version = 1;
my $test_dir = get_test_dir($pkg, $version);

my $build = get_test_somatic_variation_build(version => $build_version);
my $plan_file = File::Spec->join($test_dir, 'snvs_plan.yaml');

my $output_dir = Genome::Sys->create_temp_directory;
my $log_dir = Genome::Sys->create_temp_directory;

reinstall_sub( {
    into => $pkg,
    as => 'setup_environment',
    code => sub {
        local $ENV{UR_DUMP_DEBUG_MESSAGES} = 1;
        local $ENV{UR_COMMAND_DUMP_DEBUG_MESSAGES} = 1;
        local $ENV{UR_DUMP_STATUS_MESSAGES} = 1;
        local $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
        # no WF_USE_FLOW
    },
});

my $cmd = $pkg->execute(
    build => $build,
    variant_type => 'snvs',
    output_directory => $output_dir,
    log_directory => $log_dir,
    plan_file => $plan_file
);

my $expected_dir = File::Spec->join($test_dir, 'expected');
compare_dir_ok($output_dir, $expected_dir, 'All reports are as expected');

done_testing;

sub compare_dir_ok {
    my ($got_dir, $expected_dir, $message) = @_;

    my @got_files = map {basename($_)} glob(File::Spec->join($got_dir, '*'));
    my @expected_files = map {basename($_)} glob(File::Spec->join($expected_dir, '*'));

    cmp_bag(\@got_files, \@expected_files, 'Got all expected files') or die;

    for my $filename (@got_files) {
        my $got = File::Spec->join($got_dir, $filename);
        my $expected = File::Spec->join($expected_dir, $filename);
        compare_ok($got, $expected, "File ($filename) is as expected");
    }
}
