#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above 'Genome';
use Genome::File::Vcf::Entry;
use Genome::File::BamReadcount::Entry;
use Test::Exception;
use Test::More;
use Genome::Annotation::BamReadcount::TestHelper qw(bam_readcount_line create_entry);

my $pkg = 'Genome::Annotation::BamReadcount::MinCoverageFilter';
use_ok($pkg);

subtest "pass" => sub {
    my $min_coverage = 300;
    my $filter = $pkg->create(min_coverage => $min_coverage, sample_index => 0);
    lives_ok(sub {$filter->validate}, "Filter validates");
    my $entry = create_entry(bam_readcount_line);
    ok($filter->process_entry($entry), "Entry passes filter with min_coverage $min_coverage");
};

subtest "fail" => sub {
    my $min_coverage = 400;
    my $filter = $pkg->create(min_coverage => $min_coverage, sample_index => 0);
    lives_ok(sub {$filter->validate}, "Filter validates");

    my $entry = create_entry(bam_readcount_line);
    ok(!$filter->process_entry($entry), "Entry does not pass filter with min_coverage $min_coverage");

    $entry = create_entry("");
    ok(!$filter->process_entry($entry), "Entry without coverage does not pass filter with min_coverage $min_coverage");
};

subtest "under-specified parameters" => sub {
    my $filter = $pkg->create();
    dies_ok(sub {$filter->validate}, "Filter without enough parameters does not validate");
};

done_testing();
